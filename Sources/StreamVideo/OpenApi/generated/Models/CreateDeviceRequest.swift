//
// CreateDeviceRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif





internal struct CreateDeviceRequest: Codable, JSONEncodable, Hashable {

    internal enum PushProvider: String, Codable, CaseIterable {
        case firebase = "firebase"
        case apn = "apn"
        case huawei = "huawei"
        case xiaomi = "xiaomi"
    }
    static let idRule = StringRule(minLength: 1, maxLength: 255, pattern: nil)
    internal var id: String?
    internal var pushProvider: PushProvider?
    internal var pushProviderName: String?
    internal var user: UserRequest?
    internal var userId: String?
    internal var voipToken: Bool?

    internal init(id: String? = nil, pushProvider: PushProvider? = nil, pushProviderName: String? = nil, user: UserRequest? = nil, userId: String? = nil, voipToken: Bool? = nil) {
        self.id = id
        self.pushProvider = pushProvider
        self.pushProviderName = pushProviderName
        self.user = user
        self.userId = userId
        self.voipToken = voipToken
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case pushProvider = "push_provider"
        case pushProviderName = "push_provider_name"
        case user
        case userId = "user_id"
        case voipToken = "voip_token"
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(pushProvider, forKey: .pushProvider)
        try container.encodeIfPresent(pushProviderName, forKey: .pushProviderName)
        try container.encodeIfPresent(user, forKey: .user)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(voipToken, forKey: .voipToken)
    }
}

