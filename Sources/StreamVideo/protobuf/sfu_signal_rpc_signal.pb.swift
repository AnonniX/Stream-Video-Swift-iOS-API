//
// Copyright Â© 2022 Stream.io Inc. All rights reserved.
//

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

struct Stream_Video_Sfu_UpdateVideoQualityRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var streamQualities: [Stream_Video_Sfu_StreamQuality] = []

    var sessionID: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Sfu_UpdateVideoQualityResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Sfu_UpdateMuteStateRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var sessionID: String = String()

    var mute: Stream_Video_Sfu_UpdateMuteStateRequest.OneOf_Mute?

    var audioMuteChanged: Stream_Video_Sfu_AudioMuteChanged {
        get {
            if case let .audioMuteChanged(v)? = mute { return v }
            return Stream_Video_Sfu_AudioMuteChanged()
        }
        set { mute = .audioMuteChanged(newValue) }
    }

    var videoMuteChanged: Stream_Video_Sfu_VideoMuteChanged {
        get {
            if case let .videoMuteChanged(v)? = mute { return v }
            return Stream_Video_Sfu_VideoMuteChanged()
        }
        set { mute = .videoMuteChanged(newValue) }
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Mute: Equatable {
        case audioMuteChanged(Stream_Video_Sfu_AudioMuteChanged)
        case videoMuteChanged(Stream_Video_Sfu_VideoMuteChanged)

        #if !swift(>=4.1)
        static func == (
            lhs: Stream_Video_Sfu_UpdateMuteStateRequest.OneOf_Mute,
            rhs: Stream_Video_Sfu_UpdateMuteStateRequest.OneOf_Mute
        ) -> Bool {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch (lhs, rhs) {
            case (.audioMuteChanged, .audioMuteChanged): return {
                    guard case let .audioMuteChanged(l) = lhs, case let .audioMuteChanged(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            case (.videoMuteChanged, .videoMuteChanged): return {
                    guard case let .videoMuteChanged(l) = lhs, case let .videoMuteChanged(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            default: return false
            }
        }
        #endif
    }

    init() {}
}

struct Stream_Video_Sfu_UpdateMuteStateResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Sfu_AudioMuteChanged {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var muted: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Sfu_VideoMuteChanged {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var muted: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Sfu_UpdateSubscriptionsRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// maps stream user_ids to its size
    var subscriptions: [String: Stream_Video_Sfu_VideoDimension] = [:]

    var sessionID: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Sfu_SendAnswerRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var peerType: Stream_Video_Sfu_PeerType = .publisher

    var sdp: String = String()

    var sessionID: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Sfu_SendAnswerResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Sfu_IceCandidateRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    // TODO: use PeerTYPE!
    var publisher: Bool = false

    var candidate: String = String()

    var sdpMid: String = String()

    var sdpMlineIndex: UInt32 = 0

    var usernameFragment: String = String()

    var sessionID: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Sfu_IceCandidateResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Sfu_UpdateSubscriptionsResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Sfu_SetPublisherRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// sdp offer
    var sdp: String = String()

    var sessionID: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Sfu_SetPublisherResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// sdp answer
    var sdp: String = String()

    var sessionID: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Sfu_JoinRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var subscriberSdpOffer: String = String()

    var sessionID: String = String()

    // TODO: we should know if this is going to be
    /// - publishing and subscribing, or just subscribing for future routing
    var codecSettings: Stream_Video_Sfu_CodecSettings {
        get { _codecSettings ?? Stream_Video_Sfu_CodecSettings() }
        set { _codecSettings = newValue }
    }

    /// Returns true if `codecSettings` has been explicitly set.
    var hasCodecSettings: Bool { self._codecSettings != nil }
    /// Clears the value of `codecSettings`. Subsequent reads from it will return its default value.
    mutating func clearCodecSettings() { _codecSettings = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    private var _codecSettings: Stream_Video_Sfu_CodecSettings?
}

struct Stream_Video_Sfu_JoinResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var sdp: String = String()

    // TODO: include full list of participants with track and audio info
    var callState: Stream_Video_Sfu_CallState {
        get { _callState ?? Stream_Video_Sfu_CallState() }
        set { _callState = newValue }
    }

    /// Returns true if `callState` has been explicitly set.
    var hasCallState: Bool { self._callState != nil }
    /// Clears the value of `callState`. Subsequent reads from it will return its default value.
    mutating func clearCallState() { _callState = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    private var _callState: Stream_Video_Sfu_CallState?
}

struct Stream_Video_Sfu_ConnectRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// peer connection sdp offer
    var sdpOffer: String = String()

    /// token used for authentication
    var token: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Sfu_ConnectResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// sdp answer
    var sdpAnswer: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

/// Signaling related payload, all these messages will be exchanged using signaling channel
struct Stream_Video_Sfu_SignalRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var eventPayload: Stream_Video_Sfu_SignalRequest.OneOf_EventPayload?

    var subscribe: Stream_Video_Sfu_SubscribeRequest {
        get {
            if case let .subscribe(v)? = eventPayload { return v }
            return Stream_Video_Sfu_SubscribeRequest()
        }
        set { eventPayload = .subscribe(newValue) }
    }

    var publish: Stream_Video_Sfu_PublishRequest {
        get {
            if case let .publish(v)? = eventPayload { return v }
            return Stream_Video_Sfu_PublishRequest()
        }
        set { eventPayload = .publish(newValue) }
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_EventPayload: Equatable {
        case subscribe(Stream_Video_Sfu_SubscribeRequest)
        case publish(Stream_Video_Sfu_PublishRequest)

        #if !swift(>=4.1)
        static func == (
            lhs: Stream_Video_Sfu_SignalRequest.OneOf_EventPayload,
            rhs: Stream_Video_Sfu_SignalRequest.OneOf_EventPayload
        ) -> Bool {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch (lhs, rhs) {
            case (.subscribe, .subscribe): return {
                    guard case let .subscribe(l) = lhs, case let .subscribe(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            case (.publish, .publish): return {
                    guard case let .publish(l) = lhs, case let .publish(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            default: return false
            }
        }
        #endif
    }

    init() {}
}

struct Stream_Video_Sfu_SignalEvent {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var eventPayload: Stream_Video_Sfu_SignalEvent.OneOf_EventPayload?

    var subscribe: Stream_Video_Sfu_SubscribeResponse {
        get {
            if case let .subscribe(v)? = eventPayload { return v }
            return Stream_Video_Sfu_SubscribeResponse()
        }
        set { eventPayload = .subscribe(newValue) }
    }

    var publish: Stream_Video_Sfu_PublishResponse {
        get {
            if case let .publish(v)? = eventPayload { return v }
            return Stream_Video_Sfu_PublishResponse()
        }
        set { eventPayload = .publish(newValue) }
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_EventPayload: Equatable {
        case subscribe(Stream_Video_Sfu_SubscribeResponse)
        case publish(Stream_Video_Sfu_PublishResponse)

        #if !swift(>=4.1)
        static func == (
            lhs: Stream_Video_Sfu_SignalEvent.OneOf_EventPayload,
            rhs: Stream_Video_Sfu_SignalEvent.OneOf_EventPayload
        ) -> Bool {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch (lhs, rhs) {
            case (.subscribe, .subscribe): return {
                    guard case let .subscribe(l) = lhs, case let .subscribe(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            case (.publish, .publish): return {
                    guard case let .publish(l) = lhs, case let .publish(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            default: return false
            }
        }
        #endif
    }

    init() {}
}

/// SubscribeRequest
struct Stream_Video_Sfu_SubscribeRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var token: String = String()

    var sdpOffer: String = String()

    /// preferred quality
    var quality: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

/// SubscribeResponse
struct Stream_Video_Sfu_SubscribeResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// preferred quality
    var quality: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Sfu_PublishRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var token: String = String()

    var sdpOffer: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Sfu_PublishResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var sdpAnswer: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stream_Video_Sfu_UpdateVideoQualityRequest: @unchecked Sendable {}
extension Stream_Video_Sfu_UpdateVideoQualityResponse: @unchecked Sendable {}
extension Stream_Video_Sfu_UpdateMuteStateRequest: @unchecked Sendable {}
extension Stream_Video_Sfu_UpdateMuteStateRequest.OneOf_Mute: @unchecked Sendable {}
extension Stream_Video_Sfu_UpdateMuteStateResponse: @unchecked Sendable {}
extension Stream_Video_Sfu_AudioMuteChanged: @unchecked Sendable {}
extension Stream_Video_Sfu_VideoMuteChanged: @unchecked Sendable {}
extension Stream_Video_Sfu_UpdateSubscriptionsRequest: @unchecked Sendable {}
extension Stream_Video_Sfu_SendAnswerRequest: @unchecked Sendable {}
extension Stream_Video_Sfu_SendAnswerResponse: @unchecked Sendable {}
extension Stream_Video_Sfu_IceCandidateRequest: @unchecked Sendable {}
extension Stream_Video_Sfu_IceCandidateResponse: @unchecked Sendable {}
extension Stream_Video_Sfu_UpdateSubscriptionsResponse: @unchecked Sendable {}
extension Stream_Video_Sfu_SetPublisherRequest: @unchecked Sendable {}
extension Stream_Video_Sfu_SetPublisherResponse: @unchecked Sendable {}
extension Stream_Video_Sfu_JoinRequest: @unchecked Sendable {}
extension Stream_Video_Sfu_JoinResponse: @unchecked Sendable {}
extension Stream_Video_Sfu_ConnectRequest: @unchecked Sendable {}
extension Stream_Video_Sfu_ConnectResponse: @unchecked Sendable {}
extension Stream_Video_Sfu_SignalRequest: @unchecked Sendable {}
extension Stream_Video_Sfu_SignalRequest.OneOf_EventPayload: @unchecked Sendable {}
extension Stream_Video_Sfu_SignalEvent: @unchecked Sendable {}
extension Stream_Video_Sfu_SignalEvent.OneOf_EventPayload: @unchecked Sendable {}
extension Stream_Video_Sfu_SubscribeRequest: @unchecked Sendable {}
extension Stream_Video_Sfu_SubscribeResponse: @unchecked Sendable {}
extension Stream_Video_Sfu_PublishRequest: @unchecked Sendable {}
extension Stream_Video_Sfu_PublishResponse: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "stream.video.sfu"

extension Stream_Video_Sfu_UpdateVideoQualityRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UpdateVideoQualityRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "stream_qualities"),
        2: .standard(proto: "session_id")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeRepeatedMessageField(value: &self.streamQualities) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.sessionID) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !streamQualities.isEmpty {
            try visitor.visitRepeatedMessageField(value: streamQualities, fieldNumber: 1)
        }
        if !sessionID.isEmpty {
            try visitor.visitSingularStringField(value: sessionID, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_UpdateVideoQualityRequest, rhs: Stream_Video_Sfu_UpdateVideoQualityRequest) -> Bool {
        if lhs.streamQualities != rhs.streamQualities { return false }
        if lhs.sessionID != rhs.sessionID { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_UpdateVideoQualityResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UpdateVideoQualityResponse"
    static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_UpdateVideoQualityResponse, rhs: Stream_Video_Sfu_UpdateVideoQualityResponse) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_UpdateMuteStateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UpdateMuteStateRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "session_id"),
        2: .standard(proto: "audio_mute_changed"),
        3: .standard(proto: "video_mute_changed")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.sessionID) }()
            case 2: try {
                    var v: Stream_Video_Sfu_AudioMuteChanged?
                    var hadOneofValue = false
                    if let current = self.mute {
                        hadOneofValue = true
                        if case let .audioMuteChanged(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.mute = .audioMuteChanged(v)
                    }
                }()
            case 3: try {
                    var v: Stream_Video_Sfu_VideoMuteChanged?
                    var hadOneofValue = false
                    if let current = self.mute {
                        hadOneofValue = true
                        if case let .videoMuteChanged(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.mute = .videoMuteChanged(v)
                    }
                }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !sessionID.isEmpty {
            try visitor.visitSingularStringField(value: sessionID, fieldNumber: 1)
        }
        switch mute {
        case .audioMuteChanged?: try {
                guard case let .audioMuteChanged(v)? = self.mute else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            }()
        case .videoMuteChanged?: try {
                guard case let .videoMuteChanged(v)? = self.mute else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
            }()
        case nil: break
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_UpdateMuteStateRequest, rhs: Stream_Video_Sfu_UpdateMuteStateRequest) -> Bool {
        if lhs.sessionID != rhs.sessionID { return false }
        if lhs.mute != rhs.mute { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_UpdateMuteStateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UpdateMuteStateResponse"
    static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_UpdateMuteStateResponse, rhs: Stream_Video_Sfu_UpdateMuteStateResponse) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_AudioMuteChanged: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".AudioMuteChanged"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "muted")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularBoolField(value: &self.muted) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if muted != false {
            try visitor.visitSingularBoolField(value: muted, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_AudioMuteChanged, rhs: Stream_Video_Sfu_AudioMuteChanged) -> Bool {
        if lhs.muted != rhs.muted { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_VideoMuteChanged: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".VideoMuteChanged"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        2: .same(proto: "muted")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 2: try { try decoder.decodeSingularBoolField(value: &self.muted) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if muted != false {
            try visitor.visitSingularBoolField(value: muted, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_VideoMuteChanged, rhs: Stream_Video_Sfu_VideoMuteChanged) -> Bool {
        if lhs.muted != rhs.muted { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_UpdateSubscriptionsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UpdateSubscriptionsRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "subscriptions"),
        2: .standard(proto: "session_id")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeMapField(
                    fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString, Stream_Video_Sfu_VideoDimension>
                        .self,
                    value: &self.subscriptions
                ) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.sessionID) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !subscriptions.isEmpty {
            try visitor.visitMapField(
                fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString, Stream_Video_Sfu_VideoDimension>.self,
                value: subscriptions,
                fieldNumber: 1
            )
        }
        if !sessionID.isEmpty {
            try visitor.visitSingularStringField(value: sessionID, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_UpdateSubscriptionsRequest, rhs: Stream_Video_Sfu_UpdateSubscriptionsRequest) -> Bool {
        if lhs.subscriptions != rhs.subscriptions { return false }
        if lhs.sessionID != rhs.sessionID { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_SendAnswerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".SendAnswerRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "peer_type"),
        2: .same(proto: "sdp"),
        4: .standard(proto: "session_id")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularEnumField(value: &self.peerType) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.sdp) }()
            case 4: try { try decoder.decodeSingularStringField(value: &self.sessionID) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if peerType != .publisher {
            try visitor.visitSingularEnumField(value: peerType, fieldNumber: 1)
        }
        if !sdp.isEmpty {
            try visitor.visitSingularStringField(value: sdp, fieldNumber: 2)
        }
        if !sessionID.isEmpty {
            try visitor.visitSingularStringField(value: sessionID, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_SendAnswerRequest, rhs: Stream_Video_Sfu_SendAnswerRequest) -> Bool {
        if lhs.peerType != rhs.peerType { return false }
        if lhs.sdp != rhs.sdp { return false }
        if lhs.sessionID != rhs.sessionID { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_SendAnswerResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".SendAnswerResponse"
    static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_SendAnswerResponse, rhs: Stream_Video_Sfu_SendAnswerResponse) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_IceCandidateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".IceCandidateRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "publisher"),
        2: .same(proto: "candidate"),
        3: .same(proto: "sdpMid"),
        4: .same(proto: "sdpMLineIndex"),
        5: .same(proto: "usernameFragment"),
        7: .standard(proto: "session_id")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularBoolField(value: &self.publisher) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.candidate) }()
            case 3: try { try decoder.decodeSingularStringField(value: &self.sdpMid) }()
            case 4: try { try decoder.decodeSingularUInt32Field(value: &self.sdpMlineIndex) }()
            case 5: try { try decoder.decodeSingularStringField(value: &self.usernameFragment) }()
            case 7: try { try decoder.decodeSingularStringField(value: &self.sessionID) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if publisher != false {
            try visitor.visitSingularBoolField(value: publisher, fieldNumber: 1)
        }
        if !candidate.isEmpty {
            try visitor.visitSingularStringField(value: candidate, fieldNumber: 2)
        }
        if !sdpMid.isEmpty {
            try visitor.visitSingularStringField(value: sdpMid, fieldNumber: 3)
        }
        if sdpMlineIndex != 0 {
            try visitor.visitSingularUInt32Field(value: sdpMlineIndex, fieldNumber: 4)
        }
        if !usernameFragment.isEmpty {
            try visitor.visitSingularStringField(value: usernameFragment, fieldNumber: 5)
        }
        if !sessionID.isEmpty {
            try visitor.visitSingularStringField(value: sessionID, fieldNumber: 7)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_IceCandidateRequest, rhs: Stream_Video_Sfu_IceCandidateRequest) -> Bool {
        if lhs.publisher != rhs.publisher { return false }
        if lhs.candidate != rhs.candidate { return false }
        if lhs.sdpMid != rhs.sdpMid { return false }
        if lhs.sdpMlineIndex != rhs.sdpMlineIndex { return false }
        if lhs.usernameFragment != rhs.usernameFragment { return false }
        if lhs.sessionID != rhs.sessionID { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_IceCandidateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".IceCandidateResponse"
    static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_IceCandidateResponse, rhs: Stream_Video_Sfu_IceCandidateResponse) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_UpdateSubscriptionsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UpdateSubscriptionsResponse"
    static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_UpdateSubscriptionsResponse, rhs: Stream_Video_Sfu_UpdateSubscriptionsResponse) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_SetPublisherRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".SetPublisherRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "sdp"),
        3: .standard(proto: "session_id")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.sdp) }()
            case 3: try { try decoder.decodeSingularStringField(value: &self.sessionID) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !sdp.isEmpty {
            try visitor.visitSingularStringField(value: sdp, fieldNumber: 1)
        }
        if !sessionID.isEmpty {
            try visitor.visitSingularStringField(value: sessionID, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_SetPublisherRequest, rhs: Stream_Video_Sfu_SetPublisherRequest) -> Bool {
        if lhs.sdp != rhs.sdp { return false }
        if lhs.sessionID != rhs.sessionID { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_SetPublisherResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".SetPublisherResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "sdp"),
        3: .standard(proto: "session_id")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.sdp) }()
            case 3: try { try decoder.decodeSingularStringField(value: &self.sessionID) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !sdp.isEmpty {
            try visitor.visitSingularStringField(value: sdp, fieldNumber: 1)
        }
        if !sessionID.isEmpty {
            try visitor.visitSingularStringField(value: sessionID, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_SetPublisherResponse, rhs: Stream_Video_Sfu_SetPublisherResponse) -> Bool {
        if lhs.sdp != rhs.sdp { return false }
        if lhs.sessionID != rhs.sessionID { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_JoinRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".JoinRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "subscriber_sdp_offer"),
        3: .standard(proto: "session_id"),
        4: .standard(proto: "codec_settings")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.subscriberSdpOffer) }()
            case 3: try { try decoder.decodeSingularStringField(value: &self.sessionID) }()
            case 4: try { try decoder.decodeSingularMessageField(value: &self._codecSettings) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !subscriberSdpOffer.isEmpty {
            try visitor.visitSingularStringField(value: subscriberSdpOffer, fieldNumber: 1)
        }
        if !sessionID.isEmpty {
            try visitor.visitSingularStringField(value: sessionID, fieldNumber: 3)
        }
        try { if let v = self._codecSettings {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_JoinRequest, rhs: Stream_Video_Sfu_JoinRequest) -> Bool {
        if lhs.subscriberSdpOffer != rhs.subscriberSdpOffer { return false }
        if lhs.sessionID != rhs.sessionID { return false }
        if lhs._codecSettings != rhs._codecSettings { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_JoinResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".JoinResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "sdp"),
        2: .standard(proto: "call_state")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.sdp) }()
            case 2: try { try decoder.decodeSingularMessageField(value: &self._callState) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !sdp.isEmpty {
            try visitor.visitSingularStringField(value: sdp, fieldNumber: 1)
        }
        try { if let v = self._callState {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_JoinResponse, rhs: Stream_Video_Sfu_JoinResponse) -> Bool {
        if lhs.sdp != rhs.sdp { return false }
        if lhs._callState != rhs._callState { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_ConnectRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ConnectRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "sdp_offer"),
        2: .same(proto: "token")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.sdpOffer) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.token) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !sdpOffer.isEmpty {
            try visitor.visitSingularStringField(value: sdpOffer, fieldNumber: 1)
        }
        if !token.isEmpty {
            try visitor.visitSingularStringField(value: token, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_ConnectRequest, rhs: Stream_Video_Sfu_ConnectRequest) -> Bool {
        if lhs.sdpOffer != rhs.sdpOffer { return false }
        if lhs.token != rhs.token { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_ConnectResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ConnectResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "sdp_answer")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.sdpAnswer) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !sdpAnswer.isEmpty {
            try visitor.visitSingularStringField(value: sdpAnswer, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_ConnectResponse, rhs: Stream_Video_Sfu_ConnectResponse) -> Bool {
        if lhs.sdpAnswer != rhs.sdpAnswer { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_SignalRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".SignalRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "subscribe"),
        2: .same(proto: "publish")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try {
                    var v: Stream_Video_Sfu_SubscribeRequest?
                    var hadOneofValue = false
                    if let current = self.eventPayload {
                        hadOneofValue = true
                        if case let .subscribe(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.eventPayload = .subscribe(v)
                    }
                }()
            case 2: try {
                    var v: Stream_Video_Sfu_PublishRequest?
                    var hadOneofValue = false
                    if let current = self.eventPayload {
                        hadOneofValue = true
                        if case let .publish(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.eventPayload = .publish(v)
                    }
                }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        switch eventPayload {
        case .subscribe?: try {
                guard case let .subscribe(v)? = self.eventPayload else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            }()
        case .publish?: try {
                guard case let .publish(v)? = self.eventPayload else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            }()
        case nil: break
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_SignalRequest, rhs: Stream_Video_Sfu_SignalRequest) -> Bool {
        if lhs.eventPayload != rhs.eventPayload { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_SignalEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".SignalEvent"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "subscribe"),
        2: .same(proto: "publish")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try {
                    var v: Stream_Video_Sfu_SubscribeResponse?
                    var hadOneofValue = false
                    if let current = self.eventPayload {
                        hadOneofValue = true
                        if case let .subscribe(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.eventPayload = .subscribe(v)
                    }
                }()
            case 2: try {
                    var v: Stream_Video_Sfu_PublishResponse?
                    var hadOneofValue = false
                    if let current = self.eventPayload {
                        hadOneofValue = true
                        if case let .publish(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.eventPayload = .publish(v)
                    }
                }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        switch eventPayload {
        case .subscribe?: try {
                guard case let .subscribe(v)? = self.eventPayload else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            }()
        case .publish?: try {
                guard case let .publish(v)? = self.eventPayload else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            }()
        case nil: break
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_SignalEvent, rhs: Stream_Video_Sfu_SignalEvent) -> Bool {
        if lhs.eventPayload != rhs.eventPayload { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_SubscribeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".SubscribeRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "token"),
        2: .standard(proto: "sdp_offer"),
        3: .same(proto: "quality")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.token) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.sdpOffer) }()
            case 3: try { try decoder.decodeSingularStringField(value: &self.quality) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !token.isEmpty {
            try visitor.visitSingularStringField(value: token, fieldNumber: 1)
        }
        if !sdpOffer.isEmpty {
            try visitor.visitSingularStringField(value: sdpOffer, fieldNumber: 2)
        }
        if !quality.isEmpty {
            try visitor.visitSingularStringField(value: quality, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_SubscribeRequest, rhs: Stream_Video_Sfu_SubscribeRequest) -> Bool {
        if lhs.token != rhs.token { return false }
        if lhs.sdpOffer != rhs.sdpOffer { return false }
        if lhs.quality != rhs.quality { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_SubscribeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".SubscribeResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        2: .same(proto: "quality")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 2: try { try decoder.decodeSingularStringField(value: &self.quality) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !quality.isEmpty {
            try visitor.visitSingularStringField(value: quality, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_SubscribeResponse, rhs: Stream_Video_Sfu_SubscribeResponse) -> Bool {
        if lhs.quality != rhs.quality { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_PublishRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".PublishRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "token"),
        2: .standard(proto: "sdp_offer")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.token) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.sdpOffer) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !token.isEmpty {
            try visitor.visitSingularStringField(value: token, fieldNumber: 1)
        }
        if !sdpOffer.isEmpty {
            try visitor.visitSingularStringField(value: sdpOffer, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_PublishRequest, rhs: Stream_Video_Sfu_PublishRequest) -> Bool {
        if lhs.token != rhs.token { return false }
        if lhs.sdpOffer != rhs.sdpOffer { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_PublishResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".PublishResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        2: .standard(proto: "sdp_answer")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 2: try { try decoder.decodeSingularStringField(value: &self.sdpAnswer) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !sdpAnswer.isEmpty {
            try visitor.visitSingularStringField(value: sdpAnswer, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_PublishResponse, rhs: Stream_Video_Sfu_PublishResponse) -> Bool {
        if lhs.sdpAnswer != rhs.sdpAnswer { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
