//
// Copyright Â© 2022 Stream.io Inc. All rights reserved.
//

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

enum Stream_Video_Sfu_ModelsV1_PeerType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case publisherUnspecified // = 0
    case subscriber // = 1
    case UNRECOGNIZED(Int)

    init() {
        self = .publisherUnspecified
    }

    init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .publisherUnspecified
        case 1: self = .subscriber
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    var rawValue: Int {
        switch self {
        case .publisherUnspecified: return 0
        case .subscriber: return 1
        case let .UNRECOGNIZED(i): return i
        }
    }
}

#if swift(>=4.2)

extension Stream_Video_Sfu_ModelsV1_PeerType: CaseIterable {
    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static var allCases: [Stream_Video_Sfu_ModelsV1_PeerType] = [
        .publisherUnspecified,
        .subscriber
    ]
}

#endif // swift(>=4.2)

enum Stream_Video_Sfu_ModelsV1_ConnectionQuality: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case badUnspecified // = 0
    case poor // = 1
    case good // = 2
    case UNRECOGNIZED(Int)

    init() {
        self = .badUnspecified
    }

    init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .badUnspecified
        case 1: self = .poor
        case 2: self = .good
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    var rawValue: Int {
        switch self {
        case .badUnspecified: return 0
        case .poor: return 1
        case .good: return 2
        case let .UNRECOGNIZED(i): return i
        }
    }
}

#if swift(>=4.2)

extension Stream_Video_Sfu_ModelsV1_ConnectionQuality: CaseIterable {
    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static var allCases: [Stream_Video_Sfu_ModelsV1_ConnectionQuality] = [
        .badUnspecified,
        .poor,
        .good
    ]
}

#endif // swift(>=4.2)

enum Stream_Video_Sfu_ModelsV1_VideoQuality: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case lowUnspecified // = 0
    case mid // = 1
    case high // = 2
    case UNRECOGNIZED(Int)

    init() {
        self = .lowUnspecified
    }

    init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .lowUnspecified
        case 1: self = .mid
        case 2: self = .high
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    var rawValue: Int {
        switch self {
        case .lowUnspecified: return 0
        case .mid: return 1
        case .high: return 2
        case let .UNRECOGNIZED(i): return i
        }
    }
}

#if swift(>=4.2)

extension Stream_Video_Sfu_ModelsV1_VideoQuality: CaseIterable {
    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static var allCases: [Stream_Video_Sfu_ModelsV1_VideoQuality] = [
        .lowUnspecified,
        .mid,
        .high
    ]
}

#endif // swift(>=4.2)

struct Stream_Video_Sfu_ModelsV1_CallState {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var participants: [Stream_Video_Sfu_ModelsV1_Participant] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Sfu_ModelsV1_Call {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Unique call ID as identified by Coordinator
    var id: String = String()

    /// A timestamp of the call start. The timestamp is set when first participant connects
    var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
        get { _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
        set { _createdAt = newValue }
    }

    /// Returns true if `createdAt` has been explicitly set.
    var hasCreatedAt: Bool { self._createdAt != nil }
    /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
    mutating func clearCreatedAt() { _createdAt = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    private var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp?
}

/// those who are online in the call
struct Stream_Video_Sfu_ModelsV1_Participant {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var userID: String = String()

    var sessionID: String = String()

    var video: Bool = false

    var audio: Bool = false

    var connectedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
        get { _connectedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
        set { _connectedAt = newValue }
    }

    /// Returns true if `connectedAt` has been explicitly set.
    var hasConnectedAt: Bool { self._connectedAt != nil }
    /// Clears the value of `connectedAt`. Subsequent reads from it will return its default value.
    mutating func clearConnectedAt() { _connectedAt = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    private var _connectedAt: SwiftProtobuf.Google_Protobuf_Timestamp?
}

struct Stream_Video_Sfu_ModelsV1_StreamQuality {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var videoQuality: Stream_Video_Sfu_ModelsV1_VideoQuality = .lowUnspecified

    var userID: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Sfu_ModelsV1_VideoDimension {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var width: UInt32 = 0

    var height: UInt32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Sfu_ModelsV1_VideoLayer {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// for tracks with a single layer, this should be HIGH
    var rid: String = String()

    var videoDimension: Stream_Video_Sfu_ModelsV1_VideoDimension {
        get { _videoDimension ?? Stream_Video_Sfu_ModelsV1_VideoDimension() }
        set { _videoDimension = newValue }
    }

    /// Returns true if `videoDimension` has been explicitly set.
    var hasVideoDimension: Bool { self._videoDimension != nil }
    /// Clears the value of `videoDimension`. Subsequent reads from it will return its default value.
    mutating func clearVideoDimension() { _videoDimension = nil }

    /// target bitrate, server will measure actual
    var bitrate: UInt32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    private var _videoDimension: Stream_Video_Sfu_ModelsV1_VideoDimension?
}

struct Stream_Video_Sfu_ModelsV1_SimulcastCodecInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var mimeType: String = String()

    var mid: String = String()

    var cid: String = String()

    var layers: [Stream_Video_Sfu_ModelsV1_VideoLayer] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Sfu_ModelsV1_Codec {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var mime: String = String()

    var fmtpLine: String = String()

    var clockRate: UInt32 = 0

    var hwAccelerated: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Sfu_ModelsV1_AudioCodecs {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var encodes: [Stream_Video_Sfu_ModelsV1_Codec] = []

    var decodes: [Stream_Video_Sfu_ModelsV1_Codec] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Sfu_ModelsV1_VideoCodecs {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var encodes: [Stream_Video_Sfu_ModelsV1_Codec] = []

    var decodes: [Stream_Video_Sfu_ModelsV1_Codec] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Sfu_ModelsV1_CodecSettings {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var audio: Stream_Video_Sfu_ModelsV1_AudioCodecs {
        get { _audio ?? Stream_Video_Sfu_ModelsV1_AudioCodecs() }
        set { _audio = newValue }
    }

    /// Returns true if `audio` has been explicitly set.
    var hasAudio: Bool { self._audio != nil }
    /// Clears the value of `audio`. Subsequent reads from it will return its default value.
    mutating func clearAudio() { _audio = nil }

    var video: Stream_Video_Sfu_ModelsV1_VideoCodecs {
        get { _video ?? Stream_Video_Sfu_ModelsV1_VideoCodecs() }
        set { _video = newValue }
    }

    /// Returns true if `video` has been explicitly set.
    var hasVideo: Bool { self._video != nil }
    /// Clears the value of `video`. Subsequent reads from it will return its default value.
    mutating func clearVideo() { _video = nil }

    var layers: [Stream_Video_Sfu_ModelsV1_VideoLayer] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    private var _audio: Stream_Video_Sfu_ModelsV1_AudioCodecs?
    private var _video: Stream_Video_Sfu_ModelsV1_VideoCodecs?
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stream_Video_Sfu_ModelsV1_PeerType: @unchecked Sendable {}
extension Stream_Video_Sfu_ModelsV1_ConnectionQuality: @unchecked Sendable {}
extension Stream_Video_Sfu_ModelsV1_VideoQuality: @unchecked Sendable {}
extension Stream_Video_Sfu_ModelsV1_CallState: @unchecked Sendable {}
extension Stream_Video_Sfu_ModelsV1_Call: @unchecked Sendable {}
extension Stream_Video_Sfu_ModelsV1_Participant: @unchecked Sendable {}
extension Stream_Video_Sfu_ModelsV1_StreamQuality: @unchecked Sendable {}
extension Stream_Video_Sfu_ModelsV1_VideoDimension: @unchecked Sendable {}
extension Stream_Video_Sfu_ModelsV1_VideoLayer: @unchecked Sendable {}
extension Stream_Video_Sfu_ModelsV1_SimulcastCodecInfo: @unchecked Sendable {}
extension Stream_Video_Sfu_ModelsV1_Codec: @unchecked Sendable {}
extension Stream_Video_Sfu_ModelsV1_AudioCodecs: @unchecked Sendable {}
extension Stream_Video_Sfu_ModelsV1_VideoCodecs: @unchecked Sendable {}
extension Stream_Video_Sfu_ModelsV1_CodecSettings: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "stream.video.sfu.models_v1"

extension Stream_Video_Sfu_ModelsV1_PeerType: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "PEER_TYPE_PUBLISHER_UNSPECIFIED"),
        1: .same(proto: "PEER_TYPE_SUBSCRIBER")
    ]
}

extension Stream_Video_Sfu_ModelsV1_ConnectionQuality: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "CONNECTION_QUALITY_BAD_UNSPECIFIED"),
        1: .same(proto: "CONNECTION_QUALITY_POOR"),
        2: .same(proto: "CONNECTION_QUALITY_GOOD")
    ]
}

extension Stream_Video_Sfu_ModelsV1_VideoQuality: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "VIDEO_QUALITY_LOW_UNSPECIFIED"),
        1: .same(proto: "VIDEO_QUALITY_MID"),
        2: .same(proto: "VIDEO_QUALITY_HIGH")
    ]
}

extension Stream_Video_Sfu_ModelsV1_CallState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".CallState"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "participants")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeRepeatedMessageField(value: &self.participants) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !participants.isEmpty {
            try visitor.visitRepeatedMessageField(value: participants, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_ModelsV1_CallState, rhs: Stream_Video_Sfu_ModelsV1_CallState) -> Bool {
        if lhs.participants != rhs.participants { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_ModelsV1_Call: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".Call"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id"),
        2: .standard(proto: "created_at")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
            case 2: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !id.isEmpty {
            try visitor.visitSingularStringField(value: id, fieldNumber: 1)
        }
        try { if let v = self._createdAt {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_ModelsV1_Call, rhs: Stream_Video_Sfu_ModelsV1_Call) -> Bool {
        if lhs.id != rhs.id { return false }
        if lhs._createdAt != rhs._createdAt { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_ModelsV1_Participant: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".Participant"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "user_id"),
        2: .standard(proto: "session_id"),
        3: .same(proto: "video"),
        4: .same(proto: "audio"),
        5: .standard(proto: "connected_at")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.userID) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.sessionID) }()
            case 3: try { try decoder.decodeSingularBoolField(value: &self.video) }()
            case 4: try { try decoder.decodeSingularBoolField(value: &self.audio) }()
            case 5: try { try decoder.decodeSingularMessageField(value: &self._connectedAt) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !userID.isEmpty {
            try visitor.visitSingularStringField(value: userID, fieldNumber: 1)
        }
        if !sessionID.isEmpty {
            try visitor.visitSingularStringField(value: sessionID, fieldNumber: 2)
        }
        if video != false {
            try visitor.visitSingularBoolField(value: video, fieldNumber: 3)
        }
        if audio != false {
            try visitor.visitSingularBoolField(value: audio, fieldNumber: 4)
        }
        try { if let v = self._connectedAt {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_ModelsV1_Participant, rhs: Stream_Video_Sfu_ModelsV1_Participant) -> Bool {
        if lhs.userID != rhs.userID { return false }
        if lhs.sessionID != rhs.sessionID { return false }
        if lhs.video != rhs.video { return false }
        if lhs.audio != rhs.audio { return false }
        if lhs._connectedAt != rhs._connectedAt { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_ModelsV1_StreamQuality: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".StreamQuality"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "video_quality"),
        2: .standard(proto: "user_id")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularEnumField(value: &self.videoQuality) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if videoQuality != .lowUnspecified {
            try visitor.visitSingularEnumField(value: videoQuality, fieldNumber: 1)
        }
        if !userID.isEmpty {
            try visitor.visitSingularStringField(value: userID, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_ModelsV1_StreamQuality, rhs: Stream_Video_Sfu_ModelsV1_StreamQuality) -> Bool {
        if lhs.videoQuality != rhs.videoQuality { return false }
        if lhs.userID != rhs.userID { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_ModelsV1_VideoDimension: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".VideoDimension"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "width"),
        2: .same(proto: "height")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularUInt32Field(value: &self.width) }()
            case 2: try { try decoder.decodeSingularUInt32Field(value: &self.height) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if width != 0 {
            try visitor.visitSingularUInt32Field(value: width, fieldNumber: 1)
        }
        if height != 0 {
            try visitor.visitSingularUInt32Field(value: height, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_ModelsV1_VideoDimension, rhs: Stream_Video_Sfu_ModelsV1_VideoDimension) -> Bool {
        if lhs.width != rhs.width { return false }
        if lhs.height != rhs.height { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_ModelsV1_VideoLayer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".VideoLayer"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "rid"),
        2: .standard(proto: "video_dimension"),
        4: .same(proto: "bitrate")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.rid) }()
            case 2: try { try decoder.decodeSingularMessageField(value: &self._videoDimension) }()
            case 4: try { try decoder.decodeSingularUInt32Field(value: &self.bitrate) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !rid.isEmpty {
            try visitor.visitSingularStringField(value: rid, fieldNumber: 1)
        }
        try { if let v = self._videoDimension {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        } }()
        if bitrate != 0 {
            try visitor.visitSingularUInt32Field(value: bitrate, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_ModelsV1_VideoLayer, rhs: Stream_Video_Sfu_ModelsV1_VideoLayer) -> Bool {
        if lhs.rid != rhs.rid { return false }
        if lhs._videoDimension != rhs._videoDimension { return false }
        if lhs.bitrate != rhs.bitrate { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_ModelsV1_SimulcastCodecInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".SimulcastCodecInfo"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "mime_type"),
        2: .same(proto: "mid"),
        3: .same(proto: "cid"),
        4: .same(proto: "layers")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.mimeType) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.mid) }()
            case 3: try { try decoder.decodeSingularStringField(value: &self.cid) }()
            case 4: try { try decoder.decodeRepeatedMessageField(value: &self.layers) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !mimeType.isEmpty {
            try visitor.visitSingularStringField(value: mimeType, fieldNumber: 1)
        }
        if !mid.isEmpty {
            try visitor.visitSingularStringField(value: mid, fieldNumber: 2)
        }
        if !cid.isEmpty {
            try visitor.visitSingularStringField(value: cid, fieldNumber: 3)
        }
        if !layers.isEmpty {
            try visitor.visitRepeatedMessageField(value: layers, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_ModelsV1_SimulcastCodecInfo, rhs: Stream_Video_Sfu_ModelsV1_SimulcastCodecInfo) -> Bool {
        if lhs.mimeType != rhs.mimeType { return false }
        if lhs.mid != rhs.mid { return false }
        if lhs.cid != rhs.cid { return false }
        if lhs.layers != rhs.layers { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_ModelsV1_Codec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".Codec"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "mime"),
        2: .standard(proto: "fmtp_line"),
        3: .standard(proto: "clock_rate"),
        4: .standard(proto: "hw_accelerated")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.mime) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.fmtpLine) }()
            case 3: try { try decoder.decodeSingularUInt32Field(value: &self.clockRate) }()
            case 4: try { try decoder.decodeSingularBoolField(value: &self.hwAccelerated) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !mime.isEmpty {
            try visitor.visitSingularStringField(value: mime, fieldNumber: 1)
        }
        if !fmtpLine.isEmpty {
            try visitor.visitSingularStringField(value: fmtpLine, fieldNumber: 2)
        }
        if clockRate != 0 {
            try visitor.visitSingularUInt32Field(value: clockRate, fieldNumber: 3)
        }
        if hwAccelerated != false {
            try visitor.visitSingularBoolField(value: hwAccelerated, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_ModelsV1_Codec, rhs: Stream_Video_Sfu_ModelsV1_Codec) -> Bool {
        if lhs.mime != rhs.mime { return false }
        if lhs.fmtpLine != rhs.fmtpLine { return false }
        if lhs.clockRate != rhs.clockRate { return false }
        if lhs.hwAccelerated != rhs.hwAccelerated { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_ModelsV1_AudioCodecs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".AudioCodecs"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "encodes"),
        2: .same(proto: "decodes")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeRepeatedMessageField(value: &self.encodes) }()
            case 2: try { try decoder.decodeRepeatedMessageField(value: &self.decodes) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !encodes.isEmpty {
            try visitor.visitRepeatedMessageField(value: encodes, fieldNumber: 1)
        }
        if !decodes.isEmpty {
            try visitor.visitRepeatedMessageField(value: decodes, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_ModelsV1_AudioCodecs, rhs: Stream_Video_Sfu_ModelsV1_AudioCodecs) -> Bool {
        if lhs.encodes != rhs.encodes { return false }
        if lhs.decodes != rhs.decodes { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_ModelsV1_VideoCodecs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".VideoCodecs"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "encodes"),
        2: .same(proto: "decodes")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeRepeatedMessageField(value: &self.encodes) }()
            case 2: try { try decoder.decodeRepeatedMessageField(value: &self.decodes) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !encodes.isEmpty {
            try visitor.visitRepeatedMessageField(value: encodes, fieldNumber: 1)
        }
        if !decodes.isEmpty {
            try visitor.visitRepeatedMessageField(value: decodes, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_ModelsV1_VideoCodecs, rhs: Stream_Video_Sfu_ModelsV1_VideoCodecs) -> Bool {
        if lhs.encodes != rhs.encodes { return false }
        if lhs.decodes != rhs.decodes { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_ModelsV1_CodecSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".CodecSettings"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "audio"),
        2: .same(proto: "video"),
        3: .same(proto: "layers")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularMessageField(value: &self._audio) }()
            case 2: try { try decoder.decodeSingularMessageField(value: &self._video) }()
            case 3: try { try decoder.decodeRepeatedMessageField(value: &self.layers) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._audio {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        try { if let v = self._video {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        } }()
        if !layers.isEmpty {
            try visitor.visitRepeatedMessageField(value: layers, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_ModelsV1_CodecSettings, rhs: Stream_Video_Sfu_ModelsV1_CodecSettings) -> Bool {
        if lhs._audio != rhs._audio { return false }
        if lhs._video != rhs._video { return false }
        if lhs.layers != rhs.layers { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
