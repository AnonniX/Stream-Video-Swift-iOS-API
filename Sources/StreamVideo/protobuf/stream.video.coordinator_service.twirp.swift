//
// Copyright Â© 2022 Stream.io Inc. All rights reserved.
//

// Generated by protoc-gen-siwftwirp. DO NOT EDIT
import Foundation
import SwiftProtobuf; public typealias ProtoModel = SwiftProtobuf.Message & SwiftProtobuf._ProtoNameProviding

class Stream_Video_CallCoordinatorService {
    private let httpClient: HTTPClient
    var hostname: String
    var token: String
    var apiKey: String

    let pathPrefix: String = "/stream.video.CallCoordinatorService/"

    init(httpClient: HTTPClient, apiKey: String, hostname: String, token: String) {
        self.httpClient = httpClient
        self.hostname = hostname
        self.token = token
        self.apiKey = apiKey
    }
    
    func createCall(createCallRequest: Stream_Video_CreateCallRequest) async throws -> Stream_Video_CreateCallResponse {
        try await execute(request: createCallRequest, path: "CreateCall")
    }
    
    func getCall(getCallRequest: Stream_Video_GetCallRequest) async throws -> Stream_Video_GetCallResponse {
        try await execute(request: getCallRequest, path: "GetCall")
    }
    
    func updateCall(updateCallRequest: Stream_Video_UpdateCallRequest) async throws -> Stream_Video_UpdateCallResponse {
        try await execute(request: updateCallRequest, path: "UpdateCall")
    }
    
    func deleteCall(deleteCallRequest: Stream_Video_DeleteCallRequest) async throws -> Stream_Video_DeleteCallResponse {
        try await execute(request: deleteCallRequest, path: "DeleteCall")
    }
    
    func joinCall(joinCallRequest: Stream_Video_JoinCallRequest) async throws -> Stream_Video_JoinCallResponse {
        try await execute(request: joinCallRequest, path: "JoinCall")
    }
    
    func selectEdgeServer(selectEdgeServerRequest: Stream_Video_SelectEdgeServerRequest) async throws
        -> Stream_Video_SelectEdgeServerResponse {
        try await execute(request: selectEdgeServerRequest, path: "SelectEdgeServer")
    }
    
    func leaveCall(leaveCallRequest: Stream_Video_LeaveCallRequest) async throws -> Stream_Video_LeaveCallResponse {
        try await execute(request: leaveCallRequest, path: "LeaveCall")
    }
    
    func endCall(endCallRequest: Stream_Video_EndCallRequest) async throws -> Stream_Video_EndCallResponse {
        try await execute(request: endCallRequest, path: "EndCall")
    }
    
    func addDevice(addDeviceRequest: Stream_Video_AddDeviceRequest) async throws -> Stream_Video_AddDeviceResponse {
        try await execute(request: addDeviceRequest, path: "AddDevice")
    }
    
    func removeDevice(removeDeviceRequest: Stream_Video_RemoveDeviceRequest) async throws -> Stream_Video_RemoveDeviceResponse {
        try await execute(request: removeDeviceRequest, path: "RemoveDevice")
    }
    
    func listDevices(listDevicesRequest: Stream_Video_ListDevicesRequest) async throws -> Stream_Video_ListDevicesResponse {
        try await execute(request: listDevicesRequest, path: "ListDevices")
    }
    
    func sendEvent(sendEventRequest: Stream_Video_SendEventRequest) async throws -> Stream_Video_SendEventResponse {
        try await execute(request: sendEventRequest, path: "SendEvent")
    }
    
    func sendCustomEvent(sendCustomEventRequest: Stream_Video_SendCustomEventRequest) async throws
        -> Stream_Video_SendCustomEventResponse {
        try await execute(request: sendCustomEventRequest, path: "SendCustomEvent")
    }
    
    func createOrUpdateCalls(createOrUpdateCallsRequest: Stream_Video_CreateOrUpdateCallsRequest) async throws
        -> Stream_Video_CreateOrUpdateCallsResponse {
        try await execute(request: createOrUpdateCallsRequest, path: "CreateOrUpdateCalls")
    }
    
    func createOrUpdateUsers(createOrUpdateUsersRequest: Stream_Video_CreateOrUpdateUsersRequest) async throws
        -> Stream_Video_CreateOrUpdateUsersResponse {
        try await execute(request: createOrUpdateUsersRequest, path: "CreateOrUpdateUsers")
    }
    
    func transcribeCall(transcribeCallRequest: Stream_Video_TranscribeCallRequest) async throws
        -> Stream_Video_TranscribeCallResponse {
        try await execute(request: transcribeCallRequest, path: "TranscribeCall")
    }
    
    func stopTranscribeCall(stopTranscribeCallRequest: Stream_Video_StopTranscribeCallRequest) async throws
        -> Stream_Video_StopTranscribeCallResponse {
        try await execute(request: stopTranscribeCallRequest, path: "StopTranscribeCall")
    }
    
    func startBroadcast(startBroadcastRequest: Stream_Video_StartBroadcastRequest) async throws
        -> Stream_Video_StartBroadcastResponse {
        try await execute(request: startBroadcastRequest, path: "StartBroadcast")
    }
    
    func stopBroadcast(stopBroadcastRequest: Stream_Video_StopBroadcastRequest) async throws -> Stream_Video_StopBroadcastResponse {
        try await execute(request: stopBroadcastRequest, path: "StopBroadcast")
    }
    
    func startRecording(startRecordingRequest: Stream_Video_StartRecordingRequest) async throws
        -> Stream_Video_StartRecordingResponse {
        try await execute(request: startRecordingRequest, path: "StartRecording")
    }
    
    func stopRecording(stopRecordingRequest: Stream_Video_StopRecordingRequest) async throws -> Stream_Video_StopRecordingResponse {
        try await execute(request: stopRecordingRequest, path: "StopRecording")
    }
    
    func getRecordings(getRecordingsRequest: Stream_Video_GetRecordingsRequest) async throws -> Stream_Video_GetRecordingsResponse {
        try await execute(request: getRecordingsRequest, path: "GetRecordings")
    }
    
    func createUser(createUserRequest: Stream_Video_CreateUserRequest) async throws -> Stream_Video_CreateUserResponse {
        try await execute(request: createUserRequest, path: "CreateUser")
    }
    
    func deleteUser(deleteUserRequest: Stream_Video_DeleteUserRequest) async throws -> Stream_Video_DeleteUserResponse {
        try await execute(request: deleteUserRequest, path: "DeleteUser")
    }
    
    func exportUser(exportUserRequest: Stream_Video_ExportUserRequest) async throws -> Stream_Video_ExportUserResponse {
        try await execute(request: exportUserRequest, path: "ExportUser")
    }
    
    func updateAppSettings(updateAppSettingsRequest: Stream_Video_UpdateAppSettingsRequest) async throws
        -> Stream_Video_AppSettingsResponse {
        try await execute(request: updateAppSettingsRequest, path: "UpdateAppSettings")
    }
    
    func getAppSettings(empty: Google_Protobuf_Empty) async throws -> Stream_Video_AppSettingsResponse {
        try await execute(request: empty, path: "GetAppSettings")
    }
    
    func createCallType(callTypeRequestInput: Stream_Video_CallTypeRequestInput) async throws -> Stream_Video_CallTypeResponse {
        try await execute(request: callTypeRequestInput, path: "CreateCallType")
    }
    
    func updateCallType(callTypeRequestInput: Stream_Video_CallTypeRequestInput) async throws -> Stream_Video_CallTypeResponse {
        try await execute(request: callTypeRequestInput, path: "UpdateCallType")
    }
    
    func deleteCallType(deleteCallTypeRequest: Stream_Video_DeleteCallTypeRequest) async throws
        -> Stream_Video_DeleteCallTypeResponse {
        try await execute(request: deleteCallTypeRequest, path: "DeleteCallType")
    }
    
    func listPermissions(listPermissionsRequest: Stream_Video_ListPermissionsRequest) async throws
        -> Stream_Video_ListPermissionsResponse {
        try await execute(request: listPermissionsRequest, path: "ListPermissions")
    }
    
    func createRole(createRoleRequest: Stream_Video_CreateRoleRequest) async throws -> Stream_Video_CreateRoleResponse {
        try await execute(request: createRoleRequest, path: "CreateRole")
    }
    
    func deleteRole(deleteRoleRequest: Stream_Video_DeleteRoleRequest) async throws -> Stream_Video_DeleteRoleResponse {
        try await execute(request: deleteRoleRequest, path: "DeleteRole")
    }
    
    func addPushProvider(addPushProviderRequest: Stream_Video_AddPushProviderRequest) async throws
        -> Stream_Video_AppSettingsResponse {
        try await execute(request: addPushProviderRequest, path: "AddPushProvider")
    }
    
    func updatePushProvider(updatePushProviderRequest: Stream_Video_UpdatePushProviderRequest) async throws
        -> Stream_Video_AppSettingsResponse {
        try await execute(request: updatePushProviderRequest, path: "UpdatePushProvider")
    }
    
    func deletePushProvider(deletePushProviderRequest: Stream_Video_DeletePushProviderRequest) async throws
        -> Stream_Video_AppSettingsResponse {
        try await execute(request: deletePushProviderRequest, path: "DeletePushProvider")
    }
    
    func reportCallStats(reportCallStatsRequest: Stream_Video_ReportCallStatsRequest) async throws
        -> Stream_Video_ReportCallStatsResponse {
        try await execute(request: reportCallStatsRequest, path: "ReportCallStats")
    }
    
    func getCallStats(getCallStatsRequest: Stream_Video_GetCallStatsRequest) async throws -> Stream_Video_GetCallStatsResponse {
        try await execute(request: getCallStatsRequest, path: "GetCallStats")
    }
    
    func reviewCall(reviewCallRequest: Stream_Video_ReviewCallRequest) async throws -> Stream_Video_ReviewCallResponse {
        try await execute(request: reviewCallRequest, path: "ReviewCall")
    }
    
    func reportIssue(reportIssueRequest: Stream_Video_ReportIssueRequest) async throws -> Stream_Video_ReportIssueResponse {
        try await execute(request: reportIssueRequest, path: "ReportIssue")
    }
    
    func update(userToken: String) {
        token = userToken
    }
    
    private func execute<Request: ProtoModel, Response: ProtoModel>(request: Request, path: String) async throws -> Response {
        let requestData = try request.serializedData()
        var request = try makeRequest(for: path)
        request.httpBody = requestData
        let responseData = try await httpClient.execute(request: request)
        let response = try Response(serializedData: responseData)
        return response
    }
    
    private func makeRequest(for path: String) throws -> URLRequest {
        let url = hostname + pathPrefix + path + "?api_key=\(apiKey)"
        guard let url = URL(string: url) else {
            throw NSError(domain: "stream", code: 123)
        }
        var request = URLRequest(url: url)
        request.setValue("application/protobuf", forHTTPHeaderField: "Content-Type")
        request.setValue("Bearer \(token)", forHTTPHeaderField: "authorization")
        request.httpMethod = "POST"
        return request
    }
}
