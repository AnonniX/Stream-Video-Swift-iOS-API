// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: video_events/events.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Stream_Video_WebsocketEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var eventPayload: Stream_Video_WebsocketEvent.OneOf_EventPayload? = nil

  var healthCheck: Stream_Video_Healthcheck {
    get {
      if case .healthCheck(let v)? = eventPayload {return v}
      return Stream_Video_Healthcheck()
    }
    set {eventPayload = .healthCheck(newValue)}
  }

  var callRinging: Stream_Video_CallRinging {
    get {
      if case .callRinging(let v)? = eventPayload {return v}
      return Stream_Video_CallRinging()
    }
    set {eventPayload = .callRinging(newValue)}
  }

  var callCreated: Stream_Video_CallCreated {
    get {
      if case .callCreated(let v)? = eventPayload {return v}
      return Stream_Video_CallCreated()
    }
    set {eventPayload = .callCreated(newValue)}
  }

  var callUpdated: Stream_Video_CallUpdated {
    get {
      if case .callUpdated(let v)? = eventPayload {return v}
      return Stream_Video_CallUpdated()
    }
    set {eventPayload = .callUpdated(newValue)}
  }

  var callEnded: Stream_Video_CallEnded {
    get {
      if case .callEnded(let v)? = eventPayload {return v}
      return Stream_Video_CallEnded()
    }
    set {eventPayload = .callEnded(newValue)}
  }

  var callDeleted: Stream_Video_CallDeleted {
    get {
      if case .callDeleted(let v)? = eventPayload {return v}
      return Stream_Video_CallDeleted()
    }
    set {eventPayload = .callDeleted(newValue)}
  }

  var userUpdated: Stream_Video_UserUpdated {
    get {
      if case .userUpdated(let v)? = eventPayload {return v}
      return Stream_Video_UserUpdated()
    }
    set {eventPayload = .userUpdated(newValue)}
  }

  var participantInvited: Stream_Video_ParticipantInvited {
    get {
      if case .participantInvited(let v)? = eventPayload {return v}
      return Stream_Video_ParticipantInvited()
    }
    set {eventPayload = .participantInvited(newValue)}
  }

  var participantUpdated: Stream_Video_ParticipantUpdated {
    get {
      if case .participantUpdated(let v)? = eventPayload {return v}
      return Stream_Video_ParticipantUpdated()
    }
    set {eventPayload = .participantUpdated(newValue)}
  }

  var participantDeleted: Stream_Video_ParticipantDeleted {
    get {
      if case .participantDeleted(let v)? = eventPayload {return v}
      return Stream_Video_ParticipantDeleted()
    }
    set {eventPayload = .participantDeleted(newValue)}
  }

  var participantJoined: Stream_Video_ParticipantJoined {
    get {
      if case .participantJoined(let v)? = eventPayload {return v}
      return Stream_Video_ParticipantJoined()
    }
    set {eventPayload = .participantJoined(newValue)}
  }

  var participantLeft: Stream_Video_ParticipantLeft {
    get {
      if case .participantLeft(let v)? = eventPayload {return v}
      return Stream_Video_ParticipantLeft()
    }
    set {eventPayload = .participantLeft(newValue)}
  }

  var broadcastStarted: Stream_Video_BroadcastStarted {
    get {
      if case .broadcastStarted(let v)? = eventPayload {return v}
      return Stream_Video_BroadcastStarted()
    }
    set {eventPayload = .broadcastStarted(newValue)}
  }

  var broadcastEnded: Stream_Video_BroadcastEnded {
    get {
      if case .broadcastEnded(let v)? = eventPayload {return v}
      return Stream_Video_BroadcastEnded()
    }
    set {eventPayload = .broadcastEnded(newValue)}
  }

  var authPayload: Stream_Video_AuthPayload {
    get {
      if case .authPayload(let v)? = eventPayload {return v}
      return Stream_Video_AuthPayload()
    }
    set {eventPayload = .authPayload(newValue)}
  }

  var audioMuted: Stream_Video_AudioMuted {
    get {
      if case .audioMuted(let v)? = eventPayload {return v}
      return Stream_Video_AudioMuted()
    }
    set {eventPayload = .audioMuted(newValue)}
  }

  var audioUnmuted: Stream_Video_AudioUnmuted {
    get {
      if case .audioUnmuted(let v)? = eventPayload {return v}
      return Stream_Video_AudioUnmuted()
    }
    set {eventPayload = .audioUnmuted(newValue)}
  }

  var videoStarted: Stream_Video_VideoStarted {
    get {
      if case .videoStarted(let v)? = eventPayload {return v}
      return Stream_Video_VideoStarted()
    }
    set {eventPayload = .videoStarted(newValue)}
  }

  var videoStopped: Stream_Video_VideoStopped {
    get {
      if case .videoStopped(let v)? = eventPayload {return v}
      return Stream_Video_VideoStopped()
    }
    set {eventPayload = .videoStopped(newValue)}
  }

  var screenshareStarted: Stream_Video_ScreenshareStarted {
    get {
      if case .screenshareStarted(let v)? = eventPayload {return v}
      return Stream_Video_ScreenshareStarted()
    }
    set {eventPayload = .screenshareStarted(newValue)}
  }

  var screenshareStopped: Stream_Video_ScreenshareStopped {
    get {
      if case .screenshareStopped(let v)? = eventPayload {return v}
      return Stream_Video_ScreenshareStopped()
    }
    set {eventPayload = .screenshareStopped(newValue)}
  }

  var recordingStarted: Stream_Video_RecordingStarted {
    get {
      if case .recordingStarted(let v)? = eventPayload {return v}
      return Stream_Video_RecordingStarted()
    }
    set {eventPayload = .recordingStarted(newValue)}
  }

  var recordingStopped: Stream_Video_RecordingStopped {
    get {
      if case .recordingStopped(let v)? = eventPayload {return v}
      return Stream_Video_RecordingStopped()
    }
    set {eventPayload = .recordingStopped(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_EventPayload: Equatable {
    case healthCheck(Stream_Video_Healthcheck)
    case callRinging(Stream_Video_CallRinging)
    case callCreated(Stream_Video_CallCreated)
    case callUpdated(Stream_Video_CallUpdated)
    case callEnded(Stream_Video_CallEnded)
    case callDeleted(Stream_Video_CallDeleted)
    case userUpdated(Stream_Video_UserUpdated)
    case participantInvited(Stream_Video_ParticipantInvited)
    case participantUpdated(Stream_Video_ParticipantUpdated)
    case participantDeleted(Stream_Video_ParticipantDeleted)
    case participantJoined(Stream_Video_ParticipantJoined)
    case participantLeft(Stream_Video_ParticipantLeft)
    case broadcastStarted(Stream_Video_BroadcastStarted)
    case broadcastEnded(Stream_Video_BroadcastEnded)
    case authPayload(Stream_Video_AuthPayload)
    case audioMuted(Stream_Video_AudioMuted)
    case audioUnmuted(Stream_Video_AudioUnmuted)
    case videoStarted(Stream_Video_VideoStarted)
    case videoStopped(Stream_Video_VideoStopped)
    case screenshareStarted(Stream_Video_ScreenshareStarted)
    case screenshareStopped(Stream_Video_ScreenshareStopped)
    case recordingStarted(Stream_Video_RecordingStarted)
    case recordingStopped(Stream_Video_RecordingStopped)

  #if !swift(>=4.1)
    static func ==(lhs: Stream_Video_WebsocketEvent.OneOf_EventPayload, rhs: Stream_Video_WebsocketEvent.OneOf_EventPayload) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.healthCheck, .healthCheck): return {
        guard case .healthCheck(let l) = lhs, case .healthCheck(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.callRinging, .callRinging): return {
        guard case .callRinging(let l) = lhs, case .callRinging(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.callCreated, .callCreated): return {
        guard case .callCreated(let l) = lhs, case .callCreated(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.callUpdated, .callUpdated): return {
        guard case .callUpdated(let l) = lhs, case .callUpdated(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.callEnded, .callEnded): return {
        guard case .callEnded(let l) = lhs, case .callEnded(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.callDeleted, .callDeleted): return {
        guard case .callDeleted(let l) = lhs, case .callDeleted(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.userUpdated, .userUpdated): return {
        guard case .userUpdated(let l) = lhs, case .userUpdated(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.participantInvited, .participantInvited): return {
        guard case .participantInvited(let l) = lhs, case .participantInvited(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.participantUpdated, .participantUpdated): return {
        guard case .participantUpdated(let l) = lhs, case .participantUpdated(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.participantDeleted, .participantDeleted): return {
        guard case .participantDeleted(let l) = lhs, case .participantDeleted(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.participantJoined, .participantJoined): return {
        guard case .participantJoined(let l) = lhs, case .participantJoined(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.participantLeft, .participantLeft): return {
        guard case .participantLeft(let l) = lhs, case .participantLeft(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.broadcastStarted, .broadcastStarted): return {
        guard case .broadcastStarted(let l) = lhs, case .broadcastStarted(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.broadcastEnded, .broadcastEnded): return {
        guard case .broadcastEnded(let l) = lhs, case .broadcastEnded(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.authPayload, .authPayload): return {
        guard case .authPayload(let l) = lhs, case .authPayload(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.audioMuted, .audioMuted): return {
        guard case .audioMuted(let l) = lhs, case .audioMuted(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.audioUnmuted, .audioUnmuted): return {
        guard case .audioUnmuted(let l) = lhs, case .audioUnmuted(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.videoStarted, .videoStarted): return {
        guard case .videoStarted(let l) = lhs, case .videoStarted(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.videoStopped, .videoStopped): return {
        guard case .videoStopped(let l) = lhs, case .videoStopped(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.screenshareStarted, .screenshareStarted): return {
        guard case .screenshareStarted(let l) = lhs, case .screenshareStarted(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.screenshareStopped, .screenshareStopped): return {
        guard case .screenshareStopped(let l) = lhs, case .screenshareStopped(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.recordingStarted, .recordingStarted): return {
        guard case .recordingStarted(let l) = lhs, case .recordingStarted(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.recordingStopped, .recordingStopped): return {
        guard case .recordingStopped(let l) = lhs, case .recordingStopped(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct Stream_Video_Healthcheck {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userID: String = String()

  var clientID: String = String()

  var callType: String = String()

  var callID: String = String()

  var video: Bool = false

  var audio: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stream_Video_AuthPayload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var user: Stream_Video_UserRequest {
    get {return _user ?? Stream_Video_UserRequest()}
    set {_user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return self._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {self._user = nil}

  var device: Stream_Video_DeviceRequest {
    get {return _device ?? Stream_Video_DeviceRequest()}
    set {_device = newValue}
  }
  /// Returns true if `device` has been explicitly set.
  var hasDevice: Bool {return self._device != nil}
  /// Clears the value of `device`. Subsequent reads from it will return its default value.
  mutating func clearDevice() {self._device = nil}

  var token: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _user: Stream_Video_UserRequest? = nil
  fileprivate var _device: Stream_Video_DeviceRequest? = nil
}

///*
///CallRinging is fired when a call is created with the ring=true option
///Or when you manually call call.ring()
struct Stream_Video_CallRinging {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var call: Stream_Video_Call {
    get {return _call ?? Stream_Video_Call()}
    set {_call = newValue}
  }
  /// Returns true if `call` has been explicitly set.
  var hasCall: Bool {return self._call != nil}
  /// Clears the value of `call`. Subsequent reads from it will return its default value.
  mutating func clearCall() {self._call = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _call: Stream_Video_Call? = nil
}

///*
///CallCreated is fired when a call is created
struct Stream_Video_CallCreated {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var call: Stream_Video_Call {
    get {return _call ?? Stream_Video_Call()}
    set {_call = newValue}
  }
  /// Returns true if `call` has been explicitly set.
  var hasCall: Bool {return self._call != nil}
  /// Clears the value of `call`. Subsequent reads from it will return its default value.
  mutating func clearCall() {self._call = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _call: Stream_Video_Call? = nil
}

struct Stream_Video_CallUpdated {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var call: Stream_Video_Call {
    get {return _call ?? Stream_Video_Call()}
    set {_call = newValue}
  }
  /// Returns true if `call` has been explicitly set.
  var hasCall: Bool {return self._call != nil}
  /// Clears the value of `call`. Subsequent reads from it will return its default value.
  mutating func clearCall() {self._call = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _call: Stream_Video_Call? = nil
}

struct Stream_Video_CallEnded {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var call: Stream_Video_Call {
    get {return _call ?? Stream_Video_Call()}
    set {_call = newValue}
  }
  /// Returns true if `call` has been explicitly set.
  var hasCall: Bool {return self._call != nil}
  /// Clears the value of `call`. Subsequent reads from it will return its default value.
  mutating func clearCall() {self._call = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _call: Stream_Video_Call? = nil
}

struct Stream_Video_CallDeleted {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var call: Stream_Video_Call {
    get {return _call ?? Stream_Video_Call()}
    set {_call = newValue}
  }
  /// Returns true if `call` has been explicitly set.
  var hasCall: Bool {return self._call != nil}
  /// Clears the value of `call`. Subsequent reads from it will return its default value.
  mutating func clearCall() {self._call = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _call: Stream_Video_Call? = nil
}

struct Stream_Video_AudioMuted {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var call: Stream_Video_Call {
    get {return _call ?? Stream_Video_Call()}
    set {_call = newValue}
  }
  /// Returns true if `call` has been explicitly set.
  var hasCall: Bool {return self._call != nil}
  /// Clears the value of `call`. Subsequent reads from it will return its default value.
  mutating func clearCall() {self._call = nil}

  var target: Stream_Video_AudioMuted.OneOf_Target? = nil

  var userID: String {
    get {
      if case .userID(let v)? = target {return v}
      return String()
    }
    set {target = .userID(newValue)}
  }

  var allUsers: Bool {
    get {
      if case .allUsers(let v)? = target {return v}
      return false
    }
    set {target = .allUsers(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Target: Equatable {
    case userID(String)
    case allUsers(Bool)

  #if !swift(>=4.1)
    static func ==(lhs: Stream_Video_AudioMuted.OneOf_Target, rhs: Stream_Video_AudioMuted.OneOf_Target) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.userID, .userID): return {
        guard case .userID(let l) = lhs, case .userID(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.allUsers, .allUsers): return {
        guard case .allUsers(let l) = lhs, case .allUsers(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _call: Stream_Video_Call? = nil
}

struct Stream_Video_AudioUnmuted {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var call: Stream_Video_Call {
    get {return _call ?? Stream_Video_Call()}
    set {_call = newValue}
  }
  /// Returns true if `call` has been explicitly set.
  var hasCall: Bool {return self._call != nil}
  /// Clears the value of `call`. Subsequent reads from it will return its default value.
  mutating func clearCall() {self._call = nil}

  var userID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _call: Stream_Video_Call? = nil
}

struct Stream_Video_VideoStarted {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var call: Stream_Video_Call {
    get {return _call ?? Stream_Video_Call()}
    set {_call = newValue}
  }
  /// Returns true if `call` has been explicitly set.
  var hasCall: Bool {return self._call != nil}
  /// Clears the value of `call`. Subsequent reads from it will return its default value.
  mutating func clearCall() {self._call = nil}

  var userID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _call: Stream_Video_Call? = nil
}

struct Stream_Video_VideoStopped {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var call: Stream_Video_Call {
    get {return _call ?? Stream_Video_Call()}
    set {_call = newValue}
  }
  /// Returns true if `call` has been explicitly set.
  var hasCall: Bool {return self._call != nil}
  /// Clears the value of `call`. Subsequent reads from it will return its default value.
  mutating func clearCall() {self._call = nil}

  var userID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _call: Stream_Video_Call? = nil
}

struct Stream_Video_ScreenshareStarted {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var call: Stream_Video_Call {
    get {return _call ?? Stream_Video_Call()}
    set {_call = newValue}
  }
  /// Returns true if `call` has been explicitly set.
  var hasCall: Bool {return self._call != nil}
  /// Clears the value of `call`. Subsequent reads from it will return its default value.
  mutating func clearCall() {self._call = nil}

  var userID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _call: Stream_Video_Call? = nil
}

struct Stream_Video_ScreenshareStopped {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var call: Stream_Video_Call {
    get {return _call ?? Stream_Video_Call()}
    set {_call = newValue}
  }
  /// Returns true if `call` has been explicitly set.
  var hasCall: Bool {return self._call != nil}
  /// Clears the value of `call`. Subsequent reads from it will return its default value.
  mutating func clearCall() {self._call = nil}

  var userID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _call: Stream_Video_Call? = nil
}

struct Stream_Video_RecordingStarted {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var call: Stream_Video_Call {
    get {return _call ?? Stream_Video_Call()}
    set {_call = newValue}
  }
  /// Returns true if `call` has been explicitly set.
  var hasCall: Bool {return self._call != nil}
  /// Clears the value of `call`. Subsequent reads from it will return its default value.
  mutating func clearCall() {self._call = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _call: Stream_Video_Call? = nil
}

struct Stream_Video_RecordingStopped {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var call: Stream_Video_Call {
    get {return _call ?? Stream_Video_Call()}
    set {_call = newValue}
  }
  /// Returns true if `call` has been explicitly set.
  var hasCall: Bool {return self._call != nil}
  /// Clears the value of `call`. Subsequent reads from it will return its default value.
  mutating func clearCall() {self._call = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _call: Stream_Video_Call? = nil
}

struct Stream_Video_UserUpdated {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var user: Stream_Video_User {
    get {return _user ?? Stream_Video_User()}
    set {_user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return self._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {self._user = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _user: Stream_Video_User? = nil
}

struct Stream_Video_ParticipantInvited {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var call: Stream_Video_Call {
    get {return _call ?? Stream_Video_Call()}
    set {_call = newValue}
  }
  /// Returns true if `call` has been explicitly set.
  var hasCall: Bool {return self._call != nil}
  /// Clears the value of `call`. Subsequent reads from it will return its default value.
  mutating func clearCall() {self._call = nil}

  var participant: Stream_Video_Participant {
    get {return _participant ?? Stream_Video_Participant()}
    set {_participant = newValue}
  }
  /// Returns true if `participant` has been explicitly set.
  var hasParticipant: Bool {return self._participant != nil}
  /// Clears the value of `participant`. Subsequent reads from it will return its default value.
  mutating func clearParticipant() {self._participant = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _call: Stream_Video_Call? = nil
  fileprivate var _participant: Stream_Video_Participant? = nil
}

struct Stream_Video_ParticipantUpdated {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var call: Stream_Video_Call {
    get {return _call ?? Stream_Video_Call()}
    set {_call = newValue}
  }
  /// Returns true if `call` has been explicitly set.
  var hasCall: Bool {return self._call != nil}
  /// Clears the value of `call`. Subsequent reads from it will return its default value.
  mutating func clearCall() {self._call = nil}

  var participant: Stream_Video_Participant {
    get {return _participant ?? Stream_Video_Participant()}
    set {_participant = newValue}
  }
  /// Returns true if `participant` has been explicitly set.
  var hasParticipant: Bool {return self._participant != nil}
  /// Clears the value of `participant`. Subsequent reads from it will return its default value.
  mutating func clearParticipant() {self._participant = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _call: Stream_Video_Call? = nil
  fileprivate var _participant: Stream_Video_Participant? = nil
}

struct Stream_Video_ParticipantDeleted {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var call: Stream_Video_Call {
    get {return _call ?? Stream_Video_Call()}
    set {_call = newValue}
  }
  /// Returns true if `call` has been explicitly set.
  var hasCall: Bool {return self._call != nil}
  /// Clears the value of `call`. Subsequent reads from it will return its default value.
  mutating func clearCall() {self._call = nil}

  var userID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _call: Stream_Video_Call? = nil
}

struct Stream_Video_ParticipantJoined {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var call: Stream_Video_Call {
    get {return _call ?? Stream_Video_Call()}
    set {_call = newValue}
  }
  /// Returns true if `call` has been explicitly set.
  var hasCall: Bool {return self._call != nil}
  /// Clears the value of `call`. Subsequent reads from it will return its default value.
  mutating func clearCall() {self._call = nil}

  var participant: Stream_Video_Participant {
    get {return _participant ?? Stream_Video_Participant()}
    set {_participant = newValue}
  }
  /// Returns true if `participant` has been explicitly set.
  var hasParticipant: Bool {return self._participant != nil}
  /// Clears the value of `participant`. Subsequent reads from it will return its default value.
  mutating func clearParticipant() {self._participant = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _call: Stream_Video_Call? = nil
  fileprivate var _participant: Stream_Video_Participant? = nil
}

struct Stream_Video_ParticipantLeft {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var call: Stream_Video_Call {
    get {return _call ?? Stream_Video_Call()}
    set {_call = newValue}
  }
  /// Returns true if `call` has been explicitly set.
  var hasCall: Bool {return self._call != nil}
  /// Clears the value of `call`. Subsequent reads from it will return its default value.
  mutating func clearCall() {self._call = nil}

  var participant: Stream_Video_Participant {
    get {return _participant ?? Stream_Video_Participant()}
    set {_participant = newValue}
  }
  /// Returns true if `participant` has been explicitly set.
  var hasParticipant: Bool {return self._participant != nil}
  /// Clears the value of `participant`. Subsequent reads from it will return its default value.
  mutating func clearParticipant() {self._participant = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _call: Stream_Video_Call? = nil
  fileprivate var _participant: Stream_Video_Participant? = nil
}

struct Stream_Video_BroadcastStarted {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var call: Stream_Video_Call {
    get {return _call ?? Stream_Video_Call()}
    set {_call = newValue}
  }
  /// Returns true if `call` has been explicitly set.
  var hasCall: Bool {return self._call != nil}
  /// Clears the value of `call`. Subsequent reads from it will return its default value.
  mutating func clearCall() {self._call = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _call: Stream_Video_Call? = nil
}

struct Stream_Video_BroadcastEnded {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var call: Stream_Video_Call {
    get {return _call ?? Stream_Video_Call()}
    set {_call = newValue}
  }
  /// Returns true if `call` has been explicitly set.
  var hasCall: Bool {return self._call != nil}
  /// Clears the value of `call`. Subsequent reads from it will return its default value.
  mutating func clearCall() {self._call = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _call: Stream_Video_Call? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stream_Video_WebsocketEvent: @unchecked Sendable {}
extension Stream_Video_WebsocketEvent.OneOf_EventPayload: @unchecked Sendable {}
extension Stream_Video_Healthcheck: @unchecked Sendable {}
extension Stream_Video_AuthPayload: @unchecked Sendable {}
extension Stream_Video_CallRinging: @unchecked Sendable {}
extension Stream_Video_CallCreated: @unchecked Sendable {}
extension Stream_Video_CallUpdated: @unchecked Sendable {}
extension Stream_Video_CallEnded: @unchecked Sendable {}
extension Stream_Video_CallDeleted: @unchecked Sendable {}
extension Stream_Video_AudioMuted: @unchecked Sendable {}
extension Stream_Video_AudioMuted.OneOf_Target: @unchecked Sendable {}
extension Stream_Video_AudioUnmuted: @unchecked Sendable {}
extension Stream_Video_VideoStarted: @unchecked Sendable {}
extension Stream_Video_VideoStopped: @unchecked Sendable {}
extension Stream_Video_ScreenshareStarted: @unchecked Sendable {}
extension Stream_Video_ScreenshareStopped: @unchecked Sendable {}
extension Stream_Video_RecordingStarted: @unchecked Sendable {}
extension Stream_Video_RecordingStopped: @unchecked Sendable {}
extension Stream_Video_UserUpdated: @unchecked Sendable {}
extension Stream_Video_ParticipantInvited: @unchecked Sendable {}
extension Stream_Video_ParticipantUpdated: @unchecked Sendable {}
extension Stream_Video_ParticipantDeleted: @unchecked Sendable {}
extension Stream_Video_ParticipantJoined: @unchecked Sendable {}
extension Stream_Video_ParticipantLeft: @unchecked Sendable {}
extension Stream_Video_BroadcastStarted: @unchecked Sendable {}
extension Stream_Video_BroadcastEnded: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stream.video"

extension Stream_Video_WebsocketEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WebsocketEvent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "health_check"),
    2: .standard(proto: "call_ringing"),
    3: .standard(proto: "call_created"),
    4: .standard(proto: "call_updated"),
    5: .standard(proto: "call_ended"),
    6: .standard(proto: "call_deleted"),
    7: .standard(proto: "user_updated"),
    8: .standard(proto: "participant_invited"),
    9: .standard(proto: "participant_updated"),
    10: .standard(proto: "participant_deleted"),
    11: .standard(proto: "participant_joined"),
    12: .standard(proto: "participant_left"),
    13: .standard(proto: "broadcast_started"),
    14: .standard(proto: "broadcast_ended"),
    15: .standard(proto: "auth_payload"),
    16: .standard(proto: "audio_muted"),
    17: .standard(proto: "audio_unmuted"),
    18: .standard(proto: "video_started"),
    19: .standard(proto: "video_stopped"),
    20: .standard(proto: "screenshare_started"),
    21: .standard(proto: "screenshare_stopped"),
    22: .standard(proto: "recording_started"),
    23: .standard(proto: "recording_stopped"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Stream_Video_Healthcheck?
        var hadOneofValue = false
        if let current = self.eventPayload {
          hadOneofValue = true
          if case .healthCheck(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventPayload = .healthCheck(v)
        }
      }()
      case 2: try {
        var v: Stream_Video_CallRinging?
        var hadOneofValue = false
        if let current = self.eventPayload {
          hadOneofValue = true
          if case .callRinging(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventPayload = .callRinging(v)
        }
      }()
      case 3: try {
        var v: Stream_Video_CallCreated?
        var hadOneofValue = false
        if let current = self.eventPayload {
          hadOneofValue = true
          if case .callCreated(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventPayload = .callCreated(v)
        }
      }()
      case 4: try {
        var v: Stream_Video_CallUpdated?
        var hadOneofValue = false
        if let current = self.eventPayload {
          hadOneofValue = true
          if case .callUpdated(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventPayload = .callUpdated(v)
        }
      }()
      case 5: try {
        var v: Stream_Video_CallEnded?
        var hadOneofValue = false
        if let current = self.eventPayload {
          hadOneofValue = true
          if case .callEnded(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventPayload = .callEnded(v)
        }
      }()
      case 6: try {
        var v: Stream_Video_CallDeleted?
        var hadOneofValue = false
        if let current = self.eventPayload {
          hadOneofValue = true
          if case .callDeleted(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventPayload = .callDeleted(v)
        }
      }()
      case 7: try {
        var v: Stream_Video_UserUpdated?
        var hadOneofValue = false
        if let current = self.eventPayload {
          hadOneofValue = true
          if case .userUpdated(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventPayload = .userUpdated(v)
        }
      }()
      case 8: try {
        var v: Stream_Video_ParticipantInvited?
        var hadOneofValue = false
        if let current = self.eventPayload {
          hadOneofValue = true
          if case .participantInvited(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventPayload = .participantInvited(v)
        }
      }()
      case 9: try {
        var v: Stream_Video_ParticipantUpdated?
        var hadOneofValue = false
        if let current = self.eventPayload {
          hadOneofValue = true
          if case .participantUpdated(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventPayload = .participantUpdated(v)
        }
      }()
      case 10: try {
        var v: Stream_Video_ParticipantDeleted?
        var hadOneofValue = false
        if let current = self.eventPayload {
          hadOneofValue = true
          if case .participantDeleted(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventPayload = .participantDeleted(v)
        }
      }()
      case 11: try {
        var v: Stream_Video_ParticipantJoined?
        var hadOneofValue = false
        if let current = self.eventPayload {
          hadOneofValue = true
          if case .participantJoined(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventPayload = .participantJoined(v)
        }
      }()
      case 12: try {
        var v: Stream_Video_ParticipantLeft?
        var hadOneofValue = false
        if let current = self.eventPayload {
          hadOneofValue = true
          if case .participantLeft(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventPayload = .participantLeft(v)
        }
      }()
      case 13: try {
        var v: Stream_Video_BroadcastStarted?
        var hadOneofValue = false
        if let current = self.eventPayload {
          hadOneofValue = true
          if case .broadcastStarted(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventPayload = .broadcastStarted(v)
        }
      }()
      case 14: try {
        var v: Stream_Video_BroadcastEnded?
        var hadOneofValue = false
        if let current = self.eventPayload {
          hadOneofValue = true
          if case .broadcastEnded(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventPayload = .broadcastEnded(v)
        }
      }()
      case 15: try {
        var v: Stream_Video_AuthPayload?
        var hadOneofValue = false
        if let current = self.eventPayload {
          hadOneofValue = true
          if case .authPayload(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventPayload = .authPayload(v)
        }
      }()
      case 16: try {
        var v: Stream_Video_AudioMuted?
        var hadOneofValue = false
        if let current = self.eventPayload {
          hadOneofValue = true
          if case .audioMuted(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventPayload = .audioMuted(v)
        }
      }()
      case 17: try {
        var v: Stream_Video_AudioUnmuted?
        var hadOneofValue = false
        if let current = self.eventPayload {
          hadOneofValue = true
          if case .audioUnmuted(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventPayload = .audioUnmuted(v)
        }
      }()
      case 18: try {
        var v: Stream_Video_VideoStarted?
        var hadOneofValue = false
        if let current = self.eventPayload {
          hadOneofValue = true
          if case .videoStarted(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventPayload = .videoStarted(v)
        }
      }()
      case 19: try {
        var v: Stream_Video_VideoStopped?
        var hadOneofValue = false
        if let current = self.eventPayload {
          hadOneofValue = true
          if case .videoStopped(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventPayload = .videoStopped(v)
        }
      }()
      case 20: try {
        var v: Stream_Video_ScreenshareStarted?
        var hadOneofValue = false
        if let current = self.eventPayload {
          hadOneofValue = true
          if case .screenshareStarted(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventPayload = .screenshareStarted(v)
        }
      }()
      case 21: try {
        var v: Stream_Video_ScreenshareStopped?
        var hadOneofValue = false
        if let current = self.eventPayload {
          hadOneofValue = true
          if case .screenshareStopped(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventPayload = .screenshareStopped(v)
        }
      }()
      case 22: try {
        var v: Stream_Video_RecordingStarted?
        var hadOneofValue = false
        if let current = self.eventPayload {
          hadOneofValue = true
          if case .recordingStarted(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventPayload = .recordingStarted(v)
        }
      }()
      case 23: try {
        var v: Stream_Video_RecordingStopped?
        var hadOneofValue = false
        if let current = self.eventPayload {
          hadOneofValue = true
          if case .recordingStopped(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.eventPayload = .recordingStopped(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.eventPayload {
    case .healthCheck?: try {
      guard case .healthCheck(let v)? = self.eventPayload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .callRinging?: try {
      guard case .callRinging(let v)? = self.eventPayload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .callCreated?: try {
      guard case .callCreated(let v)? = self.eventPayload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .callUpdated?: try {
      guard case .callUpdated(let v)? = self.eventPayload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .callEnded?: try {
      guard case .callEnded(let v)? = self.eventPayload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .callDeleted?: try {
      guard case .callDeleted(let v)? = self.eventPayload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .userUpdated?: try {
      guard case .userUpdated(let v)? = self.eventPayload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .participantInvited?: try {
      guard case .participantInvited(let v)? = self.eventPayload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .participantUpdated?: try {
      guard case .participantUpdated(let v)? = self.eventPayload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .participantDeleted?: try {
      guard case .participantDeleted(let v)? = self.eventPayload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .participantJoined?: try {
      guard case .participantJoined(let v)? = self.eventPayload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .participantLeft?: try {
      guard case .participantLeft(let v)? = self.eventPayload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .broadcastStarted?: try {
      guard case .broadcastStarted(let v)? = self.eventPayload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .broadcastEnded?: try {
      guard case .broadcastEnded(let v)? = self.eventPayload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }()
    case .authPayload?: try {
      guard case .authPayload(let v)? = self.eventPayload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case .audioMuted?: try {
      guard case .audioMuted(let v)? = self.eventPayload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case .audioUnmuted?: try {
      guard case .audioUnmuted(let v)? = self.eventPayload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
    }()
    case .videoStarted?: try {
      guard case .videoStarted(let v)? = self.eventPayload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
    }()
    case .videoStopped?: try {
      guard case .videoStopped(let v)? = self.eventPayload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
    }()
    case .screenshareStarted?: try {
      guard case .screenshareStarted(let v)? = self.eventPayload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
    }()
    case .screenshareStopped?: try {
      guard case .screenshareStopped(let v)? = self.eventPayload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
    }()
    case .recordingStarted?: try {
      guard case .recordingStarted(let v)? = self.eventPayload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
    }()
    case .recordingStopped?: try {
      guard case .recordingStopped(let v)? = self.eventPayload else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stream_Video_WebsocketEvent, rhs: Stream_Video_WebsocketEvent) -> Bool {
    if lhs.eventPayload != rhs.eventPayload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stream_Video_Healthcheck: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Healthcheck"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "client_id"),
    3: .standard(proto: "call_type"),
    4: .standard(proto: "call_id"),
    5: .same(proto: "video"),
    6: .same(proto: "audio"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.callType) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.callID) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.video) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.audio) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 1)
    }
    if !self.clientID.isEmpty {
      try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 2)
    }
    if !self.callType.isEmpty {
      try visitor.visitSingularStringField(value: self.callType, fieldNumber: 3)
    }
    if !self.callID.isEmpty {
      try visitor.visitSingularStringField(value: self.callID, fieldNumber: 4)
    }
    if self.video != false {
      try visitor.visitSingularBoolField(value: self.video, fieldNumber: 5)
    }
    if self.audio != false {
      try visitor.visitSingularBoolField(value: self.audio, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stream_Video_Healthcheck, rhs: Stream_Video_Healthcheck) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.clientID != rhs.clientID {return false}
    if lhs.callType != rhs.callType {return false}
    if lhs.callID != rhs.callID {return false}
    if lhs.video != rhs.video {return false}
    if lhs.audio != rhs.audio {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stream_Video_AuthPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthPayload"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
    2: .same(proto: "device"),
    3: .same(proto: "token"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._user) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._device) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.token) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._user {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._device {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stream_Video_AuthPayload, rhs: Stream_Video_AuthPayload) -> Bool {
    if lhs._user != rhs._user {return false}
    if lhs._device != rhs._device {return false}
    if lhs.token != rhs.token {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stream_Video_CallRinging: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CallRinging"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "call"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._call {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stream_Video_CallRinging, rhs: Stream_Video_CallRinging) -> Bool {
    if lhs._call != rhs._call {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stream_Video_CallCreated: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CallCreated"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "call"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._call {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stream_Video_CallCreated, rhs: Stream_Video_CallCreated) -> Bool {
    if lhs._call != rhs._call {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stream_Video_CallUpdated: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CallUpdated"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "call"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._call {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stream_Video_CallUpdated, rhs: Stream_Video_CallUpdated) -> Bool {
    if lhs._call != rhs._call {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stream_Video_CallEnded: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CallEnded"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "call"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._call {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stream_Video_CallEnded, rhs: Stream_Video_CallEnded) -> Bool {
    if lhs._call != rhs._call {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stream_Video_CallDeleted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CallDeleted"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "call"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._call {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stream_Video_CallDeleted, rhs: Stream_Video_CallDeleted) -> Bool {
    if lhs._call != rhs._call {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stream_Video_AudioMuted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AudioMuted"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "call"),
    2: .standard(proto: "user_id"),
    3: .standard(proto: "all_users"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
      case 2: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.target != nil {try decoder.handleConflictingOneOf()}
          self.target = .userID(v)
        }
      }()
      case 3: try {
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {
          if self.target != nil {try decoder.handleConflictingOneOf()}
          self.target = .allUsers(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._call {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    switch self.target {
    case .userID?: try {
      guard case .userID(let v)? = self.target else { preconditionFailure() }
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }()
    case .allUsers?: try {
      guard case .allUsers(let v)? = self.target else { preconditionFailure() }
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stream_Video_AudioMuted, rhs: Stream_Video_AudioMuted) -> Bool {
    if lhs._call != rhs._call {return false}
    if lhs.target != rhs.target {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stream_Video_AudioUnmuted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AudioUnmuted"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "call"),
    2: .standard(proto: "user_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._call {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stream_Video_AudioUnmuted, rhs: Stream_Video_AudioUnmuted) -> Bool {
    if lhs._call != rhs._call {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stream_Video_VideoStarted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VideoStarted"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "call"),
    2: .standard(proto: "user_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._call {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stream_Video_VideoStarted, rhs: Stream_Video_VideoStarted) -> Bool {
    if lhs._call != rhs._call {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stream_Video_VideoStopped: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VideoStopped"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "call"),
    2: .standard(proto: "user_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._call {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stream_Video_VideoStopped, rhs: Stream_Video_VideoStopped) -> Bool {
    if lhs._call != rhs._call {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stream_Video_ScreenshareStarted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ScreenshareStarted"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "call"),
    2: .standard(proto: "user_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._call {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stream_Video_ScreenshareStarted, rhs: Stream_Video_ScreenshareStarted) -> Bool {
    if lhs._call != rhs._call {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stream_Video_ScreenshareStopped: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ScreenshareStopped"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "call"),
    2: .standard(proto: "user_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._call {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stream_Video_ScreenshareStopped, rhs: Stream_Video_ScreenshareStopped) -> Bool {
    if lhs._call != rhs._call {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stream_Video_RecordingStarted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RecordingStarted"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "call"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._call {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stream_Video_RecordingStarted, rhs: Stream_Video_RecordingStarted) -> Bool {
    if lhs._call != rhs._call {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stream_Video_RecordingStopped: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RecordingStopped"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "call"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._call {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stream_Video_RecordingStopped, rhs: Stream_Video_RecordingStopped) -> Bool {
    if lhs._call != rhs._call {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stream_Video_UserUpdated: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserUpdated"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._user) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._user {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stream_Video_UserUpdated, rhs: Stream_Video_UserUpdated) -> Bool {
    if lhs._user != rhs._user {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stream_Video_ParticipantInvited: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ParticipantInvited"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "call"),
    2: .same(proto: "participant"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._participant) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._call {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._participant {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stream_Video_ParticipantInvited, rhs: Stream_Video_ParticipantInvited) -> Bool {
    if lhs._call != rhs._call {return false}
    if lhs._participant != rhs._participant {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stream_Video_ParticipantUpdated: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ParticipantUpdated"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "call"),
    2: .same(proto: "participant"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._participant) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._call {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._participant {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stream_Video_ParticipantUpdated, rhs: Stream_Video_ParticipantUpdated) -> Bool {
    if lhs._call != rhs._call {return false}
    if lhs._participant != rhs._participant {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stream_Video_ParticipantDeleted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ParticipantDeleted"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "call"),
    2: .standard(proto: "user_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._call {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stream_Video_ParticipantDeleted, rhs: Stream_Video_ParticipantDeleted) -> Bool {
    if lhs._call != rhs._call {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stream_Video_ParticipantJoined: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ParticipantJoined"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "call"),
    2: .same(proto: "participant"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._participant) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._call {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._participant {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stream_Video_ParticipantJoined, rhs: Stream_Video_ParticipantJoined) -> Bool {
    if lhs._call != rhs._call {return false}
    if lhs._participant != rhs._participant {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stream_Video_ParticipantLeft: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ParticipantLeft"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "call"),
    2: .same(proto: "participant"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._participant) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._call {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._participant {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stream_Video_ParticipantLeft, rhs: Stream_Video_ParticipantLeft) -> Bool {
    if lhs._call != rhs._call {return false}
    if lhs._participant != rhs._participant {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stream_Video_BroadcastStarted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BroadcastStarted"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "call"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._call {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stream_Video_BroadcastStarted, rhs: Stream_Video_BroadcastStarted) -> Bool {
    if lhs._call != rhs._call {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stream_Video_BroadcastEnded: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BroadcastEnded"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "call"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._call {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stream_Video_BroadcastEnded, rhs: Stream_Video_BroadcastEnded) -> Bool {
    if lhs._call != rhs._call {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
