//
// Copyright Â© 2022 Stream.io Inc. All rights reserved.
//

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

struct Stream_Video_WebsocketEvent {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var eventPayload: Stream_Video_WebsocketEvent.OneOf_EventPayload?

    var healthCheck: Stream_Video_Healthcheck {
        get {
            if case let .healthCheck(v)? = eventPayload { return v }
            return Stream_Video_Healthcheck()
        }
        set { eventPayload = .healthCheck(newValue) }
    }

    var callRinging: Stream_Video_CallRinging {
        get {
            if case let .callRinging(v)? = eventPayload { return v }
            return Stream_Video_CallRinging()
        }
        set { eventPayload = .callRinging(newValue) }
    }

    var callCreated: Stream_Video_CallCreated {
        get {
            if case let .callCreated(v)? = eventPayload { return v }
            return Stream_Video_CallCreated()
        }
        set { eventPayload = .callCreated(newValue) }
    }

    var callUpdated: Stream_Video_CallUpdated {
        get {
            if case let .callUpdated(v)? = eventPayload { return v }
            return Stream_Video_CallUpdated()
        }
        set { eventPayload = .callUpdated(newValue) }
    }

    var callEnded: Stream_Video_CallEnded {
        get {
            if case let .callEnded(v)? = eventPayload { return v }
            return Stream_Video_CallEnded()
        }
        set { eventPayload = .callEnded(newValue) }
    }

    var callDeleted: Stream_Video_CallDeleted {
        get {
            if case let .callDeleted(v)? = eventPayload { return v }
            return Stream_Video_CallDeleted()
        }
        set { eventPayload = .callDeleted(newValue) }
    }

    var userUpdated: Stream_Video_UserUpdated {
        get {
            if case let .userUpdated(v)? = eventPayload { return v }
            return Stream_Video_UserUpdated()
        }
        set { eventPayload = .userUpdated(newValue) }
    }

    var participantInvited: Stream_Video_ParticipantInvited {
        get {
            if case let .participantInvited(v)? = eventPayload { return v }
            return Stream_Video_ParticipantInvited()
        }
        set { eventPayload = .participantInvited(newValue) }
    }

    var participantUpdated: Stream_Video_ParticipantUpdated {
        get {
            if case let .participantUpdated(v)? = eventPayload { return v }
            return Stream_Video_ParticipantUpdated()
        }
        set { eventPayload = .participantUpdated(newValue) }
    }

    var participantDeleted: Stream_Video_ParticipantDeleted {
        get {
            if case let .participantDeleted(v)? = eventPayload { return v }
            return Stream_Video_ParticipantDeleted()
        }
        set { eventPayload = .participantDeleted(newValue) }
    }

    var participantJoined: Stream_Video_ParticipantJoined {
        get {
            if case let .participantJoined(v)? = eventPayload { return v }
            return Stream_Video_ParticipantJoined()
        }
        set { eventPayload = .participantJoined(newValue) }
    }

    var participantLeft: Stream_Video_ParticipantLeft {
        get {
            if case let .participantLeft(v)? = eventPayload { return v }
            return Stream_Video_ParticipantLeft()
        }
        set { eventPayload = .participantLeft(newValue) }
    }

    var broadcastStarted: Stream_Video_BroadcastStarted {
        get {
            if case let .broadcastStarted(v)? = eventPayload { return v }
            return Stream_Video_BroadcastStarted()
        }
        set { eventPayload = .broadcastStarted(newValue) }
    }

    var broadcastEnded: Stream_Video_BroadcastEnded {
        get {
            if case let .broadcastEnded(v)? = eventPayload { return v }
            return Stream_Video_BroadcastEnded()
        }
        set { eventPayload = .broadcastEnded(newValue) }
    }

    var authPayload: Stream_Video_AuthPayload {
        get {
            if case let .authPayload(v)? = eventPayload { return v }
            return Stream_Video_AuthPayload()
        }
        set { eventPayload = .authPayload(newValue) }
    }

    var audioMuted: Stream_Video_AudioMuted {
        get {
            if case let .audioMuted(v)? = eventPayload { return v }
            return Stream_Video_AudioMuted()
        }
        set { eventPayload = .audioMuted(newValue) }
    }

    var audioUnmuted: Stream_Video_AudioUnmuted {
        get {
            if case let .audioUnmuted(v)? = eventPayload { return v }
            return Stream_Video_AudioUnmuted()
        }
        set { eventPayload = .audioUnmuted(newValue) }
    }

    var videoStarted: Stream_Video_VideoStarted {
        get {
            if case let .videoStarted(v)? = eventPayload { return v }
            return Stream_Video_VideoStarted()
        }
        set { eventPayload = .videoStarted(newValue) }
    }

    var videoStopped: Stream_Video_VideoStopped {
        get {
            if case let .videoStopped(v)? = eventPayload { return v }
            return Stream_Video_VideoStopped()
        }
        set { eventPayload = .videoStopped(newValue) }
    }

    var screenshareStarted: Stream_Video_ScreenshareStarted {
        get {
            if case let .screenshareStarted(v)? = eventPayload { return v }
            return Stream_Video_ScreenshareStarted()
        }
        set { eventPayload = .screenshareStarted(newValue) }
    }

    var screenshareStopped: Stream_Video_ScreenshareStopped {
        get {
            if case let .screenshareStopped(v)? = eventPayload { return v }
            return Stream_Video_ScreenshareStopped()
        }
        set { eventPayload = .screenshareStopped(newValue) }
    }

    var recordingStarted: Stream_Video_RecordingStarted {
        get {
            if case let .recordingStarted(v)? = eventPayload { return v }
            return Stream_Video_RecordingStarted()
        }
        set { eventPayload = .recordingStarted(newValue) }
    }

    var recordingStopped: Stream_Video_RecordingStopped {
        get {
            if case let .recordingStopped(v)? = eventPayload { return v }
            return Stream_Video_RecordingStopped()
        }
        set { eventPayload = .recordingStopped(newValue) }
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_EventPayload: Equatable {
        case healthCheck(Stream_Video_Healthcheck)
        case callRinging(Stream_Video_CallRinging)
        case callCreated(Stream_Video_CallCreated)
        case callUpdated(Stream_Video_CallUpdated)
        case callEnded(Stream_Video_CallEnded)
        case callDeleted(Stream_Video_CallDeleted)
        case userUpdated(Stream_Video_UserUpdated)
        case participantInvited(Stream_Video_ParticipantInvited)
        case participantUpdated(Stream_Video_ParticipantUpdated)
        case participantDeleted(Stream_Video_ParticipantDeleted)
        case participantJoined(Stream_Video_ParticipantJoined)
        case participantLeft(Stream_Video_ParticipantLeft)
        case broadcastStarted(Stream_Video_BroadcastStarted)
        case broadcastEnded(Stream_Video_BroadcastEnded)
        case authPayload(Stream_Video_AuthPayload)
        case audioMuted(Stream_Video_AudioMuted)
        case audioUnmuted(Stream_Video_AudioUnmuted)
        case videoStarted(Stream_Video_VideoStarted)
        case videoStopped(Stream_Video_VideoStopped)
        case screenshareStarted(Stream_Video_ScreenshareStarted)
        case screenshareStopped(Stream_Video_ScreenshareStopped)
        case recordingStarted(Stream_Video_RecordingStarted)
        case recordingStopped(Stream_Video_RecordingStopped)

        #if !swift(>=4.1)
        static func == (
            lhs: Stream_Video_WebsocketEvent.OneOf_EventPayload,
            rhs: Stream_Video_WebsocketEvent.OneOf_EventPayload
        ) -> Bool {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch (lhs, rhs) {
            case (.healthCheck, .healthCheck): return {
                    guard case let .healthCheck(l) = lhs, case let .healthCheck(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            case (.callRinging, .callRinging): return {
                    guard case let .callRinging(l) = lhs, case let .callRinging(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            case (.callCreated, .callCreated): return {
                    guard case let .callCreated(l) = lhs, case let .callCreated(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            case (.callUpdated, .callUpdated): return {
                    guard case let .callUpdated(l) = lhs, case let .callUpdated(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            case (.callEnded, .callEnded): return {
                    guard case let .callEnded(l) = lhs, case let .callEnded(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            case (.callDeleted, .callDeleted): return {
                    guard case let .callDeleted(l) = lhs, case let .callDeleted(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            case (.userUpdated, .userUpdated): return {
                    guard case let .userUpdated(l) = lhs, case let .userUpdated(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            case (.participantInvited, .participantInvited): return {
                    guard case let .participantInvited(l) = lhs,
                          case let .participantInvited(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            case (.participantUpdated, .participantUpdated): return {
                    guard case let .participantUpdated(l) = lhs,
                          case let .participantUpdated(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            case (.participantDeleted, .participantDeleted): return {
                    guard case let .participantDeleted(l) = lhs,
                          case let .participantDeleted(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            case (.participantJoined, .participantJoined): return {
                    guard case let .participantJoined(l) = lhs, case let .participantJoined(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            case (.participantLeft, .participantLeft): return {
                    guard case let .participantLeft(l) = lhs, case let .participantLeft(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            case (.broadcastStarted, .broadcastStarted): return {
                    guard case let .broadcastStarted(l) = lhs, case let .broadcastStarted(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            case (.broadcastEnded, .broadcastEnded): return {
                    guard case let .broadcastEnded(l) = lhs, case let .broadcastEnded(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            case (.authPayload, .authPayload): return {
                    guard case let .authPayload(l) = lhs, case let .authPayload(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            case (.audioMuted, .audioMuted): return {
                    guard case let .audioMuted(l) = lhs, case let .audioMuted(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            case (.audioUnmuted, .audioUnmuted): return {
                    guard case let .audioUnmuted(l) = lhs, case let .audioUnmuted(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            case (.videoStarted, .videoStarted): return {
                    guard case let .videoStarted(l) = lhs, case let .videoStarted(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            case (.videoStopped, .videoStopped): return {
                    guard case let .videoStopped(l) = lhs, case let .videoStopped(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            case (.screenshareStarted, .screenshareStarted): return {
                    guard case let .screenshareStarted(l) = lhs,
                          case let .screenshareStarted(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            case (.screenshareStopped, .screenshareStopped): return {
                    guard case let .screenshareStopped(l) = lhs,
                          case let .screenshareStopped(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            case (.recordingStarted, .recordingStarted): return {
                    guard case let .recordingStarted(l) = lhs, case let .recordingStarted(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            case (.recordingStopped, .recordingStopped): return {
                    guard case let .recordingStopped(l) = lhs, case let .recordingStopped(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            default: return false
            }
        }
        #endif
    }

    init() {}
}

struct Stream_Video_Healthcheck {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var userID: String = String()

    var clientID: String = String()

    var callType: String = String()

    var callID: String = String()

    var video: Bool = false

    var audio: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_AuthPayload {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var user: Stream_Video_CreateUserRequest {
        get { _user ?? Stream_Video_CreateUserRequest() }
        set { _user = newValue }
    }

    /// Returns true if `user` has been explicitly set.
    var hasUser: Bool { self._user != nil }
    /// Clears the value of `user`. Subsequent reads from it will return its default value.
    mutating func clearUser() { _user = nil }

    var device: Stream_Video_DeviceRequest {
        get { _device ?? Stream_Video_DeviceRequest() }
        set { _device = newValue }
    }

    /// Returns true if `device` has been explicitly set.
    var hasDevice: Bool { self._device != nil }
    /// Clears the value of `device`. Subsequent reads from it will return its default value.
    mutating func clearDevice() { _device = nil }

    var apiKey: String = String()

    var token: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _user: Stream_Video_CreateUserRequest?
    fileprivate var _device: Stream_Video_DeviceRequest?
}

/// *
/// CallRinging is fired when a call is created with the ring=true option
/// Or when you manually call call.ring()
struct Stream_Video_CallRinging {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var call: Stream_Video_Call {
        get { _call ?? Stream_Video_Call() }
        set { _call = newValue }
    }

    /// Returns true if `call` has been explicitly set.
    var hasCall: Bool { self._call != nil }
    /// Clears the value of `call`. Subsequent reads from it will return its default value.
    mutating func clearCall() { _call = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _call: Stream_Video_Call?
}

/// *
/// CallCreated is fired when a call is created
struct Stream_Video_CallCreated {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var call: Stream_Video_Call {
        get { _call ?? Stream_Video_Call() }
        set { _call = newValue }
    }

    /// Returns true if `call` has been explicitly set.
    var hasCall: Bool { self._call != nil }
    /// Clears the value of `call`. Subsequent reads from it will return its default value.
    mutating func clearCall() { _call = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _call: Stream_Video_Call?
}

struct Stream_Video_CallUpdated {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var call: Stream_Video_Call {
        get { _call ?? Stream_Video_Call() }
        set { _call = newValue }
    }

    /// Returns true if `call` has been explicitly set.
    var hasCall: Bool { self._call != nil }
    /// Clears the value of `call`. Subsequent reads from it will return its default value.
    mutating func clearCall() { _call = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _call: Stream_Video_Call?
}

struct Stream_Video_CallEnded {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var call: Stream_Video_Call {
        get { _call ?? Stream_Video_Call() }
        set { _call = newValue }
    }

    /// Returns true if `call` has been explicitly set.
    var hasCall: Bool { self._call != nil }
    /// Clears the value of `call`. Subsequent reads from it will return its default value.
    mutating func clearCall() { _call = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _call: Stream_Video_Call?
}

struct Stream_Video_CallDeleted {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var call: Stream_Video_Call {
        get { _call ?? Stream_Video_Call() }
        set { _call = newValue }
    }

    /// Returns true if `call` has been explicitly set.
    var hasCall: Bool { self._call != nil }
    /// Clears the value of `call`. Subsequent reads from it will return its default value.
    mutating func clearCall() { _call = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _call: Stream_Video_Call?
}

struct Stream_Video_AudioMuted {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var call: Stream_Video_Call {
        get { _call ?? Stream_Video_Call() }
        set { _call = newValue }
    }

    /// Returns true if `call` has been explicitly set.
    var hasCall: Bool { self._call != nil }
    /// Clears the value of `call`. Subsequent reads from it will return its default value.
    mutating func clearCall() { _call = nil }

    var target: Stream_Video_AudioMuted.OneOf_Target?

    var userID: String {
        get {
            if case let .userID(v)? = target { return v }
            return String()
        }
        set { target = .userID(newValue) }
    }

    var allUsers: Bool {
        get {
            if case let .allUsers(v)? = target { return v }
            return false
        }
        set { target = .allUsers(newValue) }
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Target: Equatable {
        case userID(String)
        case allUsers(Bool)

        #if !swift(>=4.1)
        static func == (lhs: Stream_Video_AudioMuted.OneOf_Target, rhs: Stream_Video_AudioMuted.OneOf_Target) -> Bool {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch (lhs, rhs) {
            case (.userID, .userID): return {
                    guard case let .userID(l) = lhs, case let .userID(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            case (.allUsers, .allUsers): return {
                    guard case let .allUsers(l) = lhs, case let .allUsers(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            default: return false
            }
        }
        #endif
    }

    init() {}

    fileprivate var _call: Stream_Video_Call?
}

struct Stream_Video_AudioUnmuted {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var call: Stream_Video_Call {
        get { _call ?? Stream_Video_Call() }
        set { _call = newValue }
    }

    /// Returns true if `call` has been explicitly set.
    var hasCall: Bool { self._call != nil }
    /// Clears the value of `call`. Subsequent reads from it will return its default value.
    mutating func clearCall() { _call = nil }

    var userID: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _call: Stream_Video_Call?
}

struct Stream_Video_VideoStarted {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var call: Stream_Video_Call {
        get { _call ?? Stream_Video_Call() }
        set { _call = newValue }
    }

    /// Returns true if `call` has been explicitly set.
    var hasCall: Bool { self._call != nil }
    /// Clears the value of `call`. Subsequent reads from it will return its default value.
    mutating func clearCall() { _call = nil }

    var userID: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _call: Stream_Video_Call?
}

struct Stream_Video_VideoStopped {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var call: Stream_Video_Call {
        get { _call ?? Stream_Video_Call() }
        set { _call = newValue }
    }

    /// Returns true if `call` has been explicitly set.
    var hasCall: Bool { self._call != nil }
    /// Clears the value of `call`. Subsequent reads from it will return its default value.
    mutating func clearCall() { _call = nil }

    var userID: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _call: Stream_Video_Call?
}

struct Stream_Video_ScreenshareStarted {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var call: Stream_Video_Call {
        get { _call ?? Stream_Video_Call() }
        set { _call = newValue }
    }

    /// Returns true if `call` has been explicitly set.
    var hasCall: Bool { self._call != nil }
    /// Clears the value of `call`. Subsequent reads from it will return its default value.
    mutating func clearCall() { _call = nil }

    var userID: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _call: Stream_Video_Call?
}

struct Stream_Video_ScreenshareStopped {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var call: Stream_Video_Call {
        get { _call ?? Stream_Video_Call() }
        set { _call = newValue }
    }

    /// Returns true if `call` has been explicitly set.
    var hasCall: Bool { self._call != nil }
    /// Clears the value of `call`. Subsequent reads from it will return its default value.
    mutating func clearCall() { _call = nil }

    var userID: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _call: Stream_Video_Call?
}

struct Stream_Video_RecordingStarted {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var call: Stream_Video_Call {
        get { _call ?? Stream_Video_Call() }
        set { _call = newValue }
    }

    /// Returns true if `call` has been explicitly set.
    var hasCall: Bool { self._call != nil }
    /// Clears the value of `call`. Subsequent reads from it will return its default value.
    mutating func clearCall() { _call = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _call: Stream_Video_Call?
}

struct Stream_Video_RecordingStopped {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var call: Stream_Video_Call {
        get { _call ?? Stream_Video_Call() }
        set { _call = newValue }
    }

    /// Returns true if `call` has been explicitly set.
    var hasCall: Bool { self._call != nil }
    /// Clears the value of `call`. Subsequent reads from it will return its default value.
    mutating func clearCall() { _call = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _call: Stream_Video_Call?
}

struct Stream_Video_UserUpdated {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var user: Stream_Video_User {
        get { _user ?? Stream_Video_User() }
        set { _user = newValue }
    }

    /// Returns true if `user` has been explicitly set.
    var hasUser: Bool { self._user != nil }
    /// Clears the value of `user`. Subsequent reads from it will return its default value.
    mutating func clearUser() { _user = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _user: Stream_Video_User?
}

struct Stream_Video_ParticipantInvited {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var call: Stream_Video_Call {
        get { _storage._call ?? Stream_Video_Call() }
        set { _uniqueStorage()._call = newValue }
    }

    /// Returns true if `call` has been explicitly set.
    var hasCall: Bool { _storage._call != nil }
    /// Clears the value of `call`. Subsequent reads from it will return its default value.
    mutating func clearCall() { _uniqueStorage()._call = nil }

    var participant: Stream_Video_Participant {
        get { _storage._participant ?? Stream_Video_Participant() }
        set { _uniqueStorage()._participant = newValue }
    }

    /// Returns true if `participant` has been explicitly set.
    var hasParticipant: Bool { _storage._participant != nil }
    /// Clears the value of `participant`. Subsequent reads from it will return its default value.
    mutating func clearParticipant() { _uniqueStorage()._participant = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Stream_Video_ParticipantUpdated {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var call: Stream_Video_Call {
        get { _storage._call ?? Stream_Video_Call() }
        set { _uniqueStorage()._call = newValue }
    }

    /// Returns true if `call` has been explicitly set.
    var hasCall: Bool { _storage._call != nil }
    /// Clears the value of `call`. Subsequent reads from it will return its default value.
    mutating func clearCall() { _uniqueStorage()._call = nil }

    var participant: Stream_Video_Participant {
        get { _storage._participant ?? Stream_Video_Participant() }
        set { _uniqueStorage()._participant = newValue }
    }

    /// Returns true if `participant` has been explicitly set.
    var hasParticipant: Bool { _storage._participant != nil }
    /// Clears the value of `participant`. Subsequent reads from it will return its default value.
    mutating func clearParticipant() { _uniqueStorage()._participant = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Stream_Video_ParticipantDeleted {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var call: Stream_Video_Call {
        get { _call ?? Stream_Video_Call() }
        set { _call = newValue }
    }

    /// Returns true if `call` has been explicitly set.
    var hasCall: Bool { self._call != nil }
    /// Clears the value of `call`. Subsequent reads from it will return its default value.
    mutating func clearCall() { _call = nil }

    var userID: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _call: Stream_Video_Call?
}

/// ParticipantJoined is fired when a user joins a call
struct Stream_Video_ParticipantJoined {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var call: Stream_Video_Call {
        get { _storage._call ?? Stream_Video_Call() }
        set { _uniqueStorage()._call = newValue }
    }

    /// Returns true if `call` has been explicitly set.
    var hasCall: Bool { _storage._call != nil }
    /// Clears the value of `call`. Subsequent reads from it will return its default value.
    mutating func clearCall() { _uniqueStorage()._call = nil }

    var participant: Stream_Video_Participant {
        get { _storage._participant ?? Stream_Video_Participant() }
        set { _uniqueStorage()._participant = newValue }
    }

    /// Returns true if `participant` has been explicitly set.
    var hasParticipant: Bool { _storage._participant != nil }
    /// Clears the value of `participant`. Subsequent reads from it will return its default value.
    mutating func clearParticipant() { _uniqueStorage()._participant = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Stream_Video_ParticipantLeft {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var call: Stream_Video_Call {
        get { _storage._call ?? Stream_Video_Call() }
        set { _uniqueStorage()._call = newValue }
    }

    /// Returns true if `call` has been explicitly set.
    var hasCall: Bool { _storage._call != nil }
    /// Clears the value of `call`. Subsequent reads from it will return its default value.
    mutating func clearCall() { _uniqueStorage()._call = nil }

    var participant: Stream_Video_Participant {
        get { _storage._participant ?? Stream_Video_Participant() }
        set { _uniqueStorage()._participant = newValue }
    }

    /// Returns true if `participant` has been explicitly set.
    var hasParticipant: Bool { _storage._participant != nil }
    /// Clears the value of `participant`. Subsequent reads from it will return its default value.
    mutating func clearParticipant() { _uniqueStorage()._participant = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Stream_Video_BroadcastStarted {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var call: Stream_Video_Call {
        get { _call ?? Stream_Video_Call() }
        set { _call = newValue }
    }

    /// Returns true if `call` has been explicitly set.
    var hasCall: Bool { self._call != nil }
    /// Clears the value of `call`. Subsequent reads from it will return its default value.
    mutating func clearCall() { _call = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _call: Stream_Video_Call?
}

struct Stream_Video_BroadcastEnded {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var call: Stream_Video_Call {
        get { _call ?? Stream_Video_Call() }
        set { _call = newValue }
    }

    /// Returns true if `call` has been explicitly set.
    var hasCall: Bool { self._call != nil }
    /// Clears the value of `call`. Subsequent reads from it will return its default value.
    mutating func clearCall() { _call = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _call: Stream_Video_Call?
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stream_Video_WebsocketEvent: @unchecked Sendable {}
extension Stream_Video_WebsocketEvent.OneOf_EventPayload: @unchecked Sendable {}
extension Stream_Video_Healthcheck: @unchecked Sendable {}
extension Stream_Video_AuthPayload: @unchecked Sendable {}
extension Stream_Video_CallRinging: @unchecked Sendable {}
extension Stream_Video_CallCreated: @unchecked Sendable {}
extension Stream_Video_CallUpdated: @unchecked Sendable {}
extension Stream_Video_CallEnded: @unchecked Sendable {}
extension Stream_Video_CallDeleted: @unchecked Sendable {}
extension Stream_Video_AudioMuted: @unchecked Sendable {}
extension Stream_Video_AudioMuted.OneOf_Target: @unchecked Sendable {}
extension Stream_Video_AudioUnmuted: @unchecked Sendable {}
extension Stream_Video_VideoStarted: @unchecked Sendable {}
extension Stream_Video_VideoStopped: @unchecked Sendable {}
extension Stream_Video_ScreenshareStarted: @unchecked Sendable {}
extension Stream_Video_ScreenshareStopped: @unchecked Sendable {}
extension Stream_Video_RecordingStarted: @unchecked Sendable {}
extension Stream_Video_RecordingStopped: @unchecked Sendable {}
extension Stream_Video_UserUpdated: @unchecked Sendable {}
extension Stream_Video_ParticipantInvited: @unchecked Sendable {}
extension Stream_Video_ParticipantUpdated: @unchecked Sendable {}
extension Stream_Video_ParticipantDeleted: @unchecked Sendable {}
extension Stream_Video_ParticipantJoined: @unchecked Sendable {}
extension Stream_Video_ParticipantLeft: @unchecked Sendable {}
extension Stream_Video_BroadcastStarted: @unchecked Sendable {}
extension Stream_Video_BroadcastEnded: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "stream.video"

extension Stream_Video_WebsocketEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".WebsocketEvent"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "health_check"),
        2: .standard(proto: "call_ringing"),
        3: .standard(proto: "call_created"),
        4: .standard(proto: "call_updated"),
        5: .standard(proto: "call_ended"),
        6: .standard(proto: "call_deleted"),
        7: .standard(proto: "user_updated"),
        8: .standard(proto: "participant_invited"),
        9: .standard(proto: "participant_updated"),
        10: .standard(proto: "participant_deleted"),
        11: .standard(proto: "participant_joined"),
        12: .standard(proto: "participant_left"),
        13: .standard(proto: "broadcast_started"),
        14: .standard(proto: "broadcast_ended"),
        15: .standard(proto: "auth_payload"),
        16: .standard(proto: "audio_muted"),
        17: .standard(proto: "audio_unmuted"),
        18: .standard(proto: "video_started"),
        19: .standard(proto: "video_stopped"),
        20: .standard(proto: "screenshare_started"),
        21: .standard(proto: "screenshare_stopped"),
        22: .standard(proto: "recording_started"),
        23: .standard(proto: "recording_stopped")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try {
                    var v: Stream_Video_Healthcheck?
                    var hadOneofValue = false
                    if let current = self.eventPayload {
                        hadOneofValue = true
                        if case let .healthCheck(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.eventPayload = .healthCheck(v)
                    }
                }()
            case 2: try {
                    var v: Stream_Video_CallRinging?
                    var hadOneofValue = false
                    if let current = self.eventPayload {
                        hadOneofValue = true
                        if case let .callRinging(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.eventPayload = .callRinging(v)
                    }
                }()
            case 3: try {
                    var v: Stream_Video_CallCreated?
                    var hadOneofValue = false
                    if let current = self.eventPayload {
                        hadOneofValue = true
                        if case let .callCreated(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.eventPayload = .callCreated(v)
                    }
                }()
            case 4: try {
                    var v: Stream_Video_CallUpdated?
                    var hadOneofValue = false
                    if let current = self.eventPayload {
                        hadOneofValue = true
                        if case let .callUpdated(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.eventPayload = .callUpdated(v)
                    }
                }()
            case 5: try {
                    var v: Stream_Video_CallEnded?
                    var hadOneofValue = false
                    if let current = self.eventPayload {
                        hadOneofValue = true
                        if case let .callEnded(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.eventPayload = .callEnded(v)
                    }
                }()
            case 6: try {
                    var v: Stream_Video_CallDeleted?
                    var hadOneofValue = false
                    if let current = self.eventPayload {
                        hadOneofValue = true
                        if case let .callDeleted(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.eventPayload = .callDeleted(v)
                    }
                }()
            case 7: try {
                    var v: Stream_Video_UserUpdated?
                    var hadOneofValue = false
                    if let current = self.eventPayload {
                        hadOneofValue = true
                        if case let .userUpdated(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.eventPayload = .userUpdated(v)
                    }
                }()
            case 8: try {
                    var v: Stream_Video_ParticipantInvited?
                    var hadOneofValue = false
                    if let current = self.eventPayload {
                        hadOneofValue = true
                        if case let .participantInvited(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.eventPayload = .participantInvited(v)
                    }
                }()
            case 9: try {
                    var v: Stream_Video_ParticipantUpdated?
                    var hadOneofValue = false
                    if let current = self.eventPayload {
                        hadOneofValue = true
                        if case let .participantUpdated(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.eventPayload = .participantUpdated(v)
                    }
                }()
            case 10: try {
                    var v: Stream_Video_ParticipantDeleted?
                    var hadOneofValue = false
                    if let current = self.eventPayload {
                        hadOneofValue = true
                        if case let .participantDeleted(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.eventPayload = .participantDeleted(v)
                    }
                }()
            case 11: try {
                    var v: Stream_Video_ParticipantJoined?
                    var hadOneofValue = false
                    if let current = self.eventPayload {
                        hadOneofValue = true
                        if case let .participantJoined(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.eventPayload = .participantJoined(v)
                    }
                }()
            case 12: try {
                    var v: Stream_Video_ParticipantLeft?
                    var hadOneofValue = false
                    if let current = self.eventPayload {
                        hadOneofValue = true
                        if case let .participantLeft(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.eventPayload = .participantLeft(v)
                    }
                }()
            case 13: try {
                    var v: Stream_Video_BroadcastStarted?
                    var hadOneofValue = false
                    if let current = self.eventPayload {
                        hadOneofValue = true
                        if case let .broadcastStarted(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.eventPayload = .broadcastStarted(v)
                    }
                }()
            case 14: try {
                    var v: Stream_Video_BroadcastEnded?
                    var hadOneofValue = false
                    if let current = self.eventPayload {
                        hadOneofValue = true
                        if case let .broadcastEnded(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.eventPayload = .broadcastEnded(v)
                    }
                }()
            case 15: try {
                    var v: Stream_Video_AuthPayload?
                    var hadOneofValue = false
                    if let current = self.eventPayload {
                        hadOneofValue = true
                        if case let .authPayload(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.eventPayload = .authPayload(v)
                    }
                }()
            case 16: try {
                    var v: Stream_Video_AudioMuted?
                    var hadOneofValue = false
                    if let current = self.eventPayload {
                        hadOneofValue = true
                        if case let .audioMuted(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.eventPayload = .audioMuted(v)
                    }
                }()
            case 17: try {
                    var v: Stream_Video_AudioUnmuted?
                    var hadOneofValue = false
                    if let current = self.eventPayload {
                        hadOneofValue = true
                        if case let .audioUnmuted(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.eventPayload = .audioUnmuted(v)
                    }
                }()
            case 18: try {
                    var v: Stream_Video_VideoStarted?
                    var hadOneofValue = false
                    if let current = self.eventPayload {
                        hadOneofValue = true
                        if case let .videoStarted(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.eventPayload = .videoStarted(v)
                    }
                }()
            case 19: try {
                    var v: Stream_Video_VideoStopped?
                    var hadOneofValue = false
                    if let current = self.eventPayload {
                        hadOneofValue = true
                        if case let .videoStopped(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.eventPayload = .videoStopped(v)
                    }
                }()
            case 20: try {
                    var v: Stream_Video_ScreenshareStarted?
                    var hadOneofValue = false
                    if let current = self.eventPayload {
                        hadOneofValue = true
                        if case let .screenshareStarted(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.eventPayload = .screenshareStarted(v)
                    }
                }()
            case 21: try {
                    var v: Stream_Video_ScreenshareStopped?
                    var hadOneofValue = false
                    if let current = self.eventPayload {
                        hadOneofValue = true
                        if case let .screenshareStopped(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.eventPayload = .screenshareStopped(v)
                    }
                }()
            case 22: try {
                    var v: Stream_Video_RecordingStarted?
                    var hadOneofValue = false
                    if let current = self.eventPayload {
                        hadOneofValue = true
                        if case let .recordingStarted(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.eventPayload = .recordingStarted(v)
                    }
                }()
            case 23: try {
                    var v: Stream_Video_RecordingStopped?
                    var hadOneofValue = false
                    if let current = self.eventPayload {
                        hadOneofValue = true
                        if case let .recordingStopped(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.eventPayload = .recordingStopped(v)
                    }
                }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        switch eventPayload {
        case .healthCheck?: try {
                guard case let .healthCheck(v)? = self.eventPayload else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            }()
        case .callRinging?: try {
                guard case let .callRinging(v)? = self.eventPayload else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            }()
        case .callCreated?: try {
                guard case let .callCreated(v)? = self.eventPayload else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
            }()
        case .callUpdated?: try {
                guard case let .callUpdated(v)? = self.eventPayload else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
            }()
        case .callEnded?: try {
                guard case let .callEnded(v)? = self.eventPayload else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
            }()
        case .callDeleted?: try {
                guard case let .callDeleted(v)? = self.eventPayload else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
            }()
        case .userUpdated?: try {
                guard case let .userUpdated(v)? = self.eventPayload else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
            }()
        case .participantInvited?: try {
                guard case let .participantInvited(v)? = self.eventPayload else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
            }()
        case .participantUpdated?: try {
                guard case let .participantUpdated(v)? = self.eventPayload else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
            }()
        case .participantDeleted?: try {
                guard case let .participantDeleted(v)? = self.eventPayload else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
            }()
        case .participantJoined?: try {
                guard case let .participantJoined(v)? = self.eventPayload else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
            }()
        case .participantLeft?: try {
                guard case let .participantLeft(v)? = self.eventPayload else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
            }()
        case .broadcastStarted?: try {
                guard case let .broadcastStarted(v)? = self.eventPayload else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
            }()
        case .broadcastEnded?: try {
                guard case let .broadcastEnded(v)? = self.eventPayload else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
            }()
        case .authPayload?: try {
                guard case let .authPayload(v)? = self.eventPayload else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
            }()
        case .audioMuted?: try {
                guard case let .audioMuted(v)? = self.eventPayload else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
            }()
        case .audioUnmuted?: try {
                guard case let .audioUnmuted(v)? = self.eventPayload else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
            }()
        case .videoStarted?: try {
                guard case let .videoStarted(v)? = self.eventPayload else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
            }()
        case .videoStopped?: try {
                guard case let .videoStopped(v)? = self.eventPayload else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
            }()
        case .screenshareStarted?: try {
                guard case let .screenshareStarted(v)? = self.eventPayload else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
            }()
        case .screenshareStopped?: try {
                guard case let .screenshareStopped(v)? = self.eventPayload else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
            }()
        case .recordingStarted?: try {
                guard case let .recordingStarted(v)? = self.eventPayload else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
            }()
        case .recordingStopped?: try {
                guard case let .recordingStopped(v)? = self.eventPayload else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
            }()
        case nil: break
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_WebsocketEvent, rhs: Stream_Video_WebsocketEvent) -> Bool {
        if lhs.eventPayload != rhs.eventPayload { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Healthcheck: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".Healthcheck"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "user_id"),
        2: .standard(proto: "client_id"),
        3: .standard(proto: "call_type"),
        4: .standard(proto: "call_id"),
        5: .same(proto: "video"),
        6: .same(proto: "audio")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.userID) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.clientID) }()
            case 3: try { try decoder.decodeSingularStringField(value: &self.callType) }()
            case 4: try { try decoder.decodeSingularStringField(value: &self.callID) }()
            case 5: try { try decoder.decodeSingularBoolField(value: &self.video) }()
            case 6: try { try decoder.decodeSingularBoolField(value: &self.audio) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !userID.isEmpty {
            try visitor.visitSingularStringField(value: userID, fieldNumber: 1)
        }
        if !clientID.isEmpty {
            try visitor.visitSingularStringField(value: clientID, fieldNumber: 2)
        }
        if !callType.isEmpty {
            try visitor.visitSingularStringField(value: callType, fieldNumber: 3)
        }
        if !callID.isEmpty {
            try visitor.visitSingularStringField(value: callID, fieldNumber: 4)
        }
        if video != false {
            try visitor.visitSingularBoolField(value: video, fieldNumber: 5)
        }
        if audio != false {
            try visitor.visitSingularBoolField(value: audio, fieldNumber: 6)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Healthcheck, rhs: Stream_Video_Healthcheck) -> Bool {
        if lhs.userID != rhs.userID { return false }
        if lhs.clientID != rhs.clientID { return false }
        if lhs.callType != rhs.callType { return false }
        if lhs.callID != rhs.callID { return false }
        if lhs.video != rhs.video { return false }
        if lhs.audio != rhs.audio { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_AuthPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".AuthPayload"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "user"),
        2: .same(proto: "device"),
        3: .standard(proto: "api_key"),
        4: .same(proto: "token")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularMessageField(value: &self._user) }()
            case 2: try { try decoder.decodeSingularMessageField(value: &self._device) }()
            case 3: try { try decoder.decodeSingularStringField(value: &self.apiKey) }()
            case 4: try { try decoder.decodeSingularStringField(value: &self.token) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._user {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        try { if let v = self._device {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        } }()
        if !apiKey.isEmpty {
            try visitor.visitSingularStringField(value: apiKey, fieldNumber: 3)
        }
        if !token.isEmpty {
            try visitor.visitSingularStringField(value: token, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_AuthPayload, rhs: Stream_Video_AuthPayload) -> Bool {
        if lhs._user != rhs._user { return false }
        if lhs._device != rhs._device { return false }
        if lhs.apiKey != rhs.apiKey { return false }
        if lhs.token != rhs.token { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_CallRinging: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".CallRinging"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "call")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._call {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_CallRinging, rhs: Stream_Video_CallRinging) -> Bool {
        if lhs._call != rhs._call { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_CallCreated: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".CallCreated"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "call")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._call {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_CallCreated, rhs: Stream_Video_CallCreated) -> Bool {
        if lhs._call != rhs._call { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_CallUpdated: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".CallUpdated"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "call")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._call {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_CallUpdated, rhs: Stream_Video_CallUpdated) -> Bool {
        if lhs._call != rhs._call { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_CallEnded: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".CallEnded"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "call")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._call {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_CallEnded, rhs: Stream_Video_CallEnded) -> Bool {
        if lhs._call != rhs._call { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_CallDeleted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".CallDeleted"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "call")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._call {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_CallDeleted, rhs: Stream_Video_CallDeleted) -> Bool {
        if lhs._call != rhs._call { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_AudioMuted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".AudioMuted"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "call"),
        2: .standard(proto: "user_id"),
        3: .standard(proto: "all_users")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
            case 2: try {
                    var v: String?
                    try decoder.decodeSingularStringField(value: &v)
                    if let v = v {
                        if self.target != nil { try decoder.handleConflictingOneOf() }
                        self.target = .userID(v)
                    }
                }()
            case 3: try {
                    var v: Bool?
                    try decoder.decodeSingularBoolField(value: &v)
                    if let v = v {
                        if self.target != nil { try decoder.handleConflictingOneOf() }
                        self.target = .allUsers(v)
                    }
                }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._call {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        switch target {
        case .userID?: try {
                guard case let .userID(v)? = self.target else { preconditionFailure() }
                try visitor.visitSingularStringField(value: v, fieldNumber: 2)
            }()
        case .allUsers?: try {
                guard case let .allUsers(v)? = self.target else { preconditionFailure() }
                try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
            }()
        case nil: break
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_AudioMuted, rhs: Stream_Video_AudioMuted) -> Bool {
        if lhs._call != rhs._call { return false }
        if lhs.target != rhs.target { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_AudioUnmuted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".AudioUnmuted"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "call"),
        2: .standard(proto: "user_id")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._call {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        if !userID.isEmpty {
            try visitor.visitSingularStringField(value: userID, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_AudioUnmuted, rhs: Stream_Video_AudioUnmuted) -> Bool {
        if lhs._call != rhs._call { return false }
        if lhs.userID != rhs.userID { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_VideoStarted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".VideoStarted"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "call"),
        2: .standard(proto: "user_id")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._call {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        if !userID.isEmpty {
            try visitor.visitSingularStringField(value: userID, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_VideoStarted, rhs: Stream_Video_VideoStarted) -> Bool {
        if lhs._call != rhs._call { return false }
        if lhs.userID != rhs.userID { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_VideoStopped: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".VideoStopped"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "call"),
        2: .standard(proto: "user_id")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._call {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        if !userID.isEmpty {
            try visitor.visitSingularStringField(value: userID, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_VideoStopped, rhs: Stream_Video_VideoStopped) -> Bool {
        if lhs._call != rhs._call { return false }
        if lhs.userID != rhs.userID { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_ScreenshareStarted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ScreenshareStarted"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "call"),
        2: .standard(proto: "user_id")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._call {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        if !userID.isEmpty {
            try visitor.visitSingularStringField(value: userID, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_ScreenshareStarted, rhs: Stream_Video_ScreenshareStarted) -> Bool {
        if lhs._call != rhs._call { return false }
        if lhs.userID != rhs.userID { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_ScreenshareStopped: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ScreenshareStopped"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "call"),
        2: .standard(proto: "user_id")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._call {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        if !userID.isEmpty {
            try visitor.visitSingularStringField(value: userID, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_ScreenshareStopped, rhs: Stream_Video_ScreenshareStopped) -> Bool {
        if lhs._call != rhs._call { return false }
        if lhs.userID != rhs.userID { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_RecordingStarted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".RecordingStarted"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "call")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._call {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_RecordingStarted, rhs: Stream_Video_RecordingStarted) -> Bool {
        if lhs._call != rhs._call { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_RecordingStopped: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".RecordingStopped"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "call")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._call {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_RecordingStopped, rhs: Stream_Video_RecordingStopped) -> Bool {
        if lhs._call != rhs._call { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_UserUpdated: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UserUpdated"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "user")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularMessageField(value: &self._user) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._user {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_UserUpdated, rhs: Stream_Video_UserUpdated) -> Bool {
        if lhs._user != rhs._user { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_ParticipantInvited: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ParticipantInvited"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "call"),
        2: .same(proto: "participant")
    ]

    fileprivate class _StorageClass {
        var _call: Stream_Video_Call?
        var _participant: Stream_Video_Participant?

        static let defaultInstance = _StorageClass()

        private init() {}

        init(copying source: _StorageClass) {
            _call = source._call
            _participant = source._participant
        }
    }

    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                // The use of inline closures is to circumvent an issue where the compiler
                // allocates stack space for every case branch when no optimizations are
                // enabled. https://github.com/apple/swift-protobuf/issues/1034
                switch fieldNumber {
                case 1: try { try decoder.decodeSingularMessageField(value: &_storage._call) }()
                case 2: try { try decoder.decodeSingularMessageField(value: &_storage._participant) }()
                default: break
                }
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every if/case branch local when no optimizations
            // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
            // https://github.com/apple/swift-protobuf/issues/1182
            try { if let v = _storage._call {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            } }()
            try { if let v = _storage._participant {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            } }()
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_ParticipantInvited, rhs: Stream_Video_ParticipantInvited) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool =
                withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                    let _storage = _args.0
                    let rhs_storage = _args.1
                    if _storage._call != rhs_storage._call { return false }
                    if _storage._participant != rhs_storage._participant { return false }
                    return true
                }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_ParticipantUpdated: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ParticipantUpdated"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "call"),
        2: .same(proto: "participant")
    ]

    fileprivate class _StorageClass {
        var _call: Stream_Video_Call?
        var _participant: Stream_Video_Participant?

        static let defaultInstance = _StorageClass()

        private init() {}

        init(copying source: _StorageClass) {
            _call = source._call
            _participant = source._participant
        }
    }

    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                // The use of inline closures is to circumvent an issue where the compiler
                // allocates stack space for every case branch when no optimizations are
                // enabled. https://github.com/apple/swift-protobuf/issues/1034
                switch fieldNumber {
                case 1: try { try decoder.decodeSingularMessageField(value: &_storage._call) }()
                case 2: try { try decoder.decodeSingularMessageField(value: &_storage._participant) }()
                default: break
                }
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every if/case branch local when no optimizations
            // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
            // https://github.com/apple/swift-protobuf/issues/1182
            try { if let v = _storage._call {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            } }()
            try { if let v = _storage._participant {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            } }()
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_ParticipantUpdated, rhs: Stream_Video_ParticipantUpdated) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool =
                withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                    let _storage = _args.0
                    let rhs_storage = _args.1
                    if _storage._call != rhs_storage._call { return false }
                    if _storage._participant != rhs_storage._participant { return false }
                    return true
                }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_ParticipantDeleted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ParticipantDeleted"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "call"),
        2: .standard(proto: "user_id")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._call {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        if !userID.isEmpty {
            try visitor.visitSingularStringField(value: userID, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_ParticipantDeleted, rhs: Stream_Video_ParticipantDeleted) -> Bool {
        if lhs._call != rhs._call { return false }
        if lhs.userID != rhs.userID { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_ParticipantJoined: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ParticipantJoined"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "call"),
        2: .same(proto: "participant")
    ]

    fileprivate class _StorageClass {
        var _call: Stream_Video_Call?
        var _participant: Stream_Video_Participant?

        static let defaultInstance = _StorageClass()

        private init() {}

        init(copying source: _StorageClass) {
            _call = source._call
            _participant = source._participant
        }
    }

    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                // The use of inline closures is to circumvent an issue where the compiler
                // allocates stack space for every case branch when no optimizations are
                // enabled. https://github.com/apple/swift-protobuf/issues/1034
                switch fieldNumber {
                case 1: try { try decoder.decodeSingularMessageField(value: &_storage._call) }()
                case 2: try { try decoder.decodeSingularMessageField(value: &_storage._participant) }()
                default: break
                }
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every if/case branch local when no optimizations
            // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
            // https://github.com/apple/swift-protobuf/issues/1182
            try { if let v = _storage._call {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            } }()
            try { if let v = _storage._participant {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            } }()
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_ParticipantJoined, rhs: Stream_Video_ParticipantJoined) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool =
                withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                    let _storage = _args.0
                    let rhs_storage = _args.1
                    if _storage._call != rhs_storage._call { return false }
                    if _storage._participant != rhs_storage._participant { return false }
                    return true
                }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_ParticipantLeft: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ParticipantLeft"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "call"),
        2: .same(proto: "participant")
    ]

    fileprivate class _StorageClass {
        var _call: Stream_Video_Call?
        var _participant: Stream_Video_Participant?

        static let defaultInstance = _StorageClass()

        private init() {}

        init(copying source: _StorageClass) {
            _call = source._call
            _participant = source._participant
        }
    }

    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                // The use of inline closures is to circumvent an issue where the compiler
                // allocates stack space for every case branch when no optimizations are
                // enabled. https://github.com/apple/swift-protobuf/issues/1034
                switch fieldNumber {
                case 1: try { try decoder.decodeSingularMessageField(value: &_storage._call) }()
                case 2: try { try decoder.decodeSingularMessageField(value: &_storage._participant) }()
                default: break
                }
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every if/case branch local when no optimizations
            // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
            // https://github.com/apple/swift-protobuf/issues/1182
            try { if let v = _storage._call {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            } }()
            try { if let v = _storage._participant {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            } }()
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_ParticipantLeft, rhs: Stream_Video_ParticipantLeft) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool =
                withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                    let _storage = _args.0
                    let rhs_storage = _args.1
                    if _storage._call != rhs_storage._call { return false }
                    if _storage._participant != rhs_storage._participant { return false }
                    return true
                }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_BroadcastStarted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".BroadcastStarted"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "call")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._call {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_BroadcastStarted, rhs: Stream_Video_BroadcastStarted) -> Bool {
        if lhs._call != rhs._call { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_BroadcastEnded: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".BroadcastEnded"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "call")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularMessageField(value: &self._call) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._call {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_BroadcastEnded, rhs: Stream_Video_BroadcastEnded) -> Bool {
        if lhs._call != rhs._call { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
