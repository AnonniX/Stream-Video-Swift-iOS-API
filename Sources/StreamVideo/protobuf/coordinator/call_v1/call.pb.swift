//
// Copyright Â© 2022 Stream.io Inc. All rights reserved.
//

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

struct Stream_Video_Coordinator_CallV1_CallType {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The unique name for the call type.
    var name: String = String()

    var options: Stream_Video_Coordinator_CallV1_CallOptions {
        get { _options ?? Stream_Video_Coordinator_CallV1_CallOptions() }
        set { _options = newValue }
    }

    /// Returns true if `options` has been explicitly set.
    var hasOptions: Bool { self._options != nil }
    /// Clears the value of `options`. Subsequent reads from it will return its default value.
    mutating func clearOptions() { _options = nil }

    var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
        get { _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
        set { _createdAt = newValue }
    }

    /// Returns true if `createdAt` has been explicitly set.
    var hasCreatedAt: Bool { self._createdAt != nil }
    /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
    mutating func clearCreatedAt() { _createdAt = nil }

    var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
        get { _updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
        set { _updatedAt = newValue }
    }

    /// Returns true if `updatedAt` has been explicitly set.
    var hasUpdatedAt: Bool { self._updatedAt != nil }
    /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
    mutating func clearUpdatedAt() { _updatedAt = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _options: Stream_Video_Coordinator_CallV1_CallOptions?
    fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp?
    fileprivate var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp?
}

struct Stream_Video_Coordinator_CallV1_Call {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The call type.
    var type: String = String()

    /// The call id.
    var id: String = String()

    /// A concatenation of call type and call id with ":" inbetween
    var callCid: String = String()

    /// The id of the user that created this room.
    var createdByUserID: String = String()

    var customJson: Data = Data()

    /// Room options that are set explicitly in this room
    /// This set of options does not include RoomType options
    var options: Stream_Video_Coordinator_CallV1_CallOptions {
        get { _options ?? Stream_Video_Coordinator_CallV1_CallOptions() }
        set { _options = newValue }
    }

    /// Returns true if `options` has been explicitly set.
    var hasOptions: Bool { self._options != nil }
    /// Clears the value of `options`. Subsequent reads from it will return its default value.
    mutating func clearOptions() { _options = nil }

    var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
        get { _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
        set { _createdAt = newValue }
    }

    /// Returns true if `createdAt` has been explicitly set.
    var hasCreatedAt: Bool { self._createdAt != nil }
    /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
    mutating func clearCreatedAt() { _createdAt = nil }

    var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
        get { _updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
        set { _updatedAt = newValue }
    }

    /// Returns true if `updatedAt` has been explicitly set.
    var hasUpdatedAt: Bool { self._updatedAt != nil }
    /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
    mutating func clearUpdatedAt() { _updatedAt = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _options: Stream_Video_Coordinator_CallV1_CallOptions?
    fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp?
    fileprivate var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp?
}

/// CallDetails contains call additional details
struct Stream_Video_Coordinator_CallV1_CallDetails {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Call options merged with CallType options
    var options: Stream_Video_Coordinator_CallV1_CallOptions {
        get { _options ?? Stream_Video_Coordinator_CallV1_CallOptions() }
        set { _options = newValue }
    }

    /// Returns true if `options` has been explicitly set.
    var hasOptions: Bool { self._options != nil }
    /// Clears the value of `options`. Subsequent reads from it will return its default value.
    mutating func clearOptions() { _options = nil }

    /// Ordered list of member user IDs
    var memberUserIds: [String] = []

    /// Room members map indexed by Member.user_id
    /// Cannot have more than 100 members
    var members: [String: Stream_Video_Coordinator_MemberV1_Member] = [:]

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _options: Stream_Video_Coordinator_CallV1_CallOptions?
}

/// CallOptions contains all options available to change for the RoomType
/// Options can also be set on the room level where they will be merged with RoomType options using `proto.Merge`
/// To make sure options can be overriden on the room level, all underlying option fields should be optional
struct Stream_Video_Coordinator_CallV1_CallOptions {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var recording: Stream_Video_Coordinator_CallV1_RecordingOptions {
        get { _recording ?? Stream_Video_Coordinator_CallV1_RecordingOptions() }
        set { _recording = newValue }
    }

    /// Returns true if `recording` has been explicitly set.
    var hasRecording: Bool { self._recording != nil }
    /// Clears the value of `recording`. Subsequent reads from it will return its default value.
    mutating func clearRecording() { _recording = nil }

    var broadcasting: Stream_Video_Coordinator_CallV1_BroadcastingOptions {
        get { _broadcasting ?? Stream_Video_Coordinator_CallV1_BroadcastingOptions() }
        set { _broadcasting = newValue }
    }

    /// Returns true if `broadcasting` has been explicitly set.
    var hasBroadcasting: Bool { self._broadcasting != nil }
    /// Clears the value of `broadcasting`. Subsequent reads from it will return its default value.
    mutating func clearBroadcasting() { _broadcasting = nil }

    var transcription: Stream_Video_Coordinator_CallV1_TranscriptionOptions {
        get { _transcription ?? Stream_Video_Coordinator_CallV1_TranscriptionOptions() }
        set { _transcription = newValue }
    }

    /// Returns true if `transcription` has been explicitly set.
    var hasTranscription: Bool { self._transcription != nil }
    /// Clears the value of `transcription`. Subsequent reads from it will return its default value.
    mutating func clearTranscription() { _transcription = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _recording: Stream_Video_Coordinator_CallV1_RecordingOptions?
    fileprivate var _broadcasting: Stream_Video_Coordinator_CallV1_BroadcastingOptions?
    fileprivate var _transcription: Stream_Video_Coordinator_CallV1_TranscriptionOptions?
}

/// Contains all options regarding to call recording
struct Stream_Video_Coordinator_CallV1_RecordingOptions {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Whether recording feature is enabled
    /// Default: false
    var enabled: Bool {
        get { _enabled ?? false }
        set { _enabled = newValue }
    }

    /// Returns true if `enabled` has been explicitly set.
    var hasEnabled: Bool { self._enabled != nil }
    /// Clears the value of `enabled`. Subsequent reads from it will return its default value.
    mutating func clearEnabled() { _enabled = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _enabled: Bool?
}

/// Contains all options regarding to call broadcasting
struct Stream_Video_Coordinator_CallV1_BroadcastingOptions {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Whether broadcasting feature is enabled
    /// Default: false
    var enabled: Bool {
        get { _enabled ?? false }
        set { _enabled = newValue }
    }

    /// Returns true if `enabled` has been explicitly set.
    var hasEnabled: Bool { self._enabled != nil }
    /// Clears the value of `enabled`. Subsequent reads from it will return its default value.
    mutating func clearEnabled() { _enabled = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _enabled: Bool?
}

/// Contains all options regarding to call transcription
struct Stream_Video_Coordinator_CallV1_TranscriptionOptions {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Whether transcription feature is enabled
    /// Default: false
    var enabled: Bool {
        get { _enabled ?? false }
        set { _enabled = newValue }
    }

    /// Returns true if `enabled` has been explicitly set.
    var hasEnabled: Bool { self._enabled != nil }
    /// Clears the value of `enabled`. Subsequent reads from it will return its default value.
    mutating func clearEnabled() { _enabled = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _enabled: Bool?
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stream_Video_Coordinator_CallV1_CallType: @unchecked Sendable {}
extension Stream_Video_Coordinator_CallV1_Call: @unchecked Sendable {}
extension Stream_Video_Coordinator_CallV1_CallDetails: @unchecked Sendable {}
extension Stream_Video_Coordinator_CallV1_CallOptions: @unchecked Sendable {}
extension Stream_Video_Coordinator_CallV1_RecordingOptions: @unchecked Sendable {}
extension Stream_Video_Coordinator_CallV1_BroadcastingOptions: @unchecked Sendable {}
extension Stream_Video_Coordinator_CallV1_TranscriptionOptions: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "stream.video.coordinator.call_v1"

extension Stream_Video_Coordinator_CallV1_CallType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".CallType"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "name"),
        2: .same(proto: "options"),
        3: .standard(proto: "created_at"),
        4: .standard(proto: "updated_at")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
            case 2: try { try decoder.decodeSingularMessageField(value: &self._options) }()
            case 3: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
            case 4: try { try decoder.decodeSingularMessageField(value: &self._updatedAt) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !name.isEmpty {
            try visitor.visitSingularStringField(value: name, fieldNumber: 1)
        }
        try { if let v = self._options {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        } }()
        try { if let v = self._createdAt {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        } }()
        try { if let v = self._updatedAt {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Coordinator_CallV1_CallType, rhs: Stream_Video_Coordinator_CallV1_CallType) -> Bool {
        if lhs.name != rhs.name { return false }
        if lhs._options != rhs._options { return false }
        if lhs._createdAt != rhs._createdAt { return false }
        if lhs._updatedAt != rhs._updatedAt { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Coordinator_CallV1_Call: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".Call"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "type"),
        2: .same(proto: "id"),
        3: .standard(proto: "call_cid"),
        4: .standard(proto: "created_by_user_id"),
        5: .standard(proto: "custom_json"),
        6: .same(proto: "options"),
        7: .standard(proto: "created_at"),
        8: .standard(proto: "updated_at")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.type) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.id) }()
            case 3: try { try decoder.decodeSingularStringField(value: &self.callCid) }()
            case 4: try { try decoder.decodeSingularStringField(value: &self.createdByUserID) }()
            case 5: try { try decoder.decodeSingularBytesField(value: &self.customJson) }()
            case 6: try { try decoder.decodeSingularMessageField(value: &self._options) }()
            case 7: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
            case 8: try { try decoder.decodeSingularMessageField(value: &self._updatedAt) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !type.isEmpty {
            try visitor.visitSingularStringField(value: type, fieldNumber: 1)
        }
        if !id.isEmpty {
            try visitor.visitSingularStringField(value: id, fieldNumber: 2)
        }
        if !callCid.isEmpty {
            try visitor.visitSingularStringField(value: callCid, fieldNumber: 3)
        }
        if !createdByUserID.isEmpty {
            try visitor.visitSingularStringField(value: createdByUserID, fieldNumber: 4)
        }
        if !customJson.isEmpty {
            try visitor.visitSingularBytesField(value: customJson, fieldNumber: 5)
        }
        try { if let v = self._options {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
        } }()
        try { if let v = self._createdAt {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
        } }()
        try { if let v = self._updatedAt {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Coordinator_CallV1_Call, rhs: Stream_Video_Coordinator_CallV1_Call) -> Bool {
        if lhs.type != rhs.type { return false }
        if lhs.id != rhs.id { return false }
        if lhs.callCid != rhs.callCid { return false }
        if lhs.createdByUserID != rhs.createdByUserID { return false }
        if lhs.customJson != rhs.customJson { return false }
        if lhs._options != rhs._options { return false }
        if lhs._createdAt != rhs._createdAt { return false }
        if lhs._updatedAt != rhs._updatedAt { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Coordinator_CallV1_CallDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".CallDetails"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "options"),
        2: .standard(proto: "member_user_ids"),
        3: .same(proto: "members")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularMessageField(value: &self._options) }()
            case 2: try { try decoder.decodeRepeatedStringField(value: &self.memberUserIds) }()
            case 3: try { try decoder.decodeMapField(
                    fieldType: SwiftProtobuf._ProtobufMessageMap<
                        SwiftProtobuf.ProtobufString,
                        Stream_Video_Coordinator_MemberV1_Member
                    >.self,
                    value: &self.members
                ) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._options {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        if !memberUserIds.isEmpty {
            try visitor.visitRepeatedStringField(value: memberUserIds, fieldNumber: 2)
        }
        if !members.isEmpty {
            try visitor.visitMapField(
                fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString, Stream_Video_Coordinator_MemberV1_Member>
                    .self,
                value: members,
                fieldNumber: 3
            )
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Coordinator_CallV1_CallDetails, rhs: Stream_Video_Coordinator_CallV1_CallDetails) -> Bool {
        if lhs._options != rhs._options { return false }
        if lhs.memberUserIds != rhs.memberUserIds { return false }
        if lhs.members != rhs.members { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Coordinator_CallV1_CallOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".CallOptions"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "recording"),
        2: .same(proto: "broadcasting"),
        3: .same(proto: "transcription")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularMessageField(value: &self._recording) }()
            case 2: try { try decoder.decodeSingularMessageField(value: &self._broadcasting) }()
            case 3: try { try decoder.decodeSingularMessageField(value: &self._transcription) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._recording {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        try { if let v = self._broadcasting {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        } }()
        try { if let v = self._transcription {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Coordinator_CallV1_CallOptions, rhs: Stream_Video_Coordinator_CallV1_CallOptions) -> Bool {
        if lhs._recording != rhs._recording { return false }
        if lhs._broadcasting != rhs._broadcasting { return false }
        if lhs._transcription != rhs._transcription { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Coordinator_CallV1_RecordingOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".RecordingOptions"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "enabled")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularBoolField(value: &self._enabled) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._enabled {
            try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (
        lhs: Stream_Video_Coordinator_CallV1_RecordingOptions,
        rhs: Stream_Video_Coordinator_CallV1_RecordingOptions
    ) -> Bool {
        if lhs._enabled != rhs._enabled { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Coordinator_CallV1_BroadcastingOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".BroadcastingOptions"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "enabled")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularBoolField(value: &self._enabled) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._enabled {
            try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (
        lhs: Stream_Video_Coordinator_CallV1_BroadcastingOptions,
        rhs: Stream_Video_Coordinator_CallV1_BroadcastingOptions
    ) -> Bool {
        if lhs._enabled != rhs._enabled { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Coordinator_CallV1_TranscriptionOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".TranscriptionOptions"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "enabled")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularBoolField(value: &self._enabled) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._enabled {
            try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (
        lhs: Stream_Video_Coordinator_CallV1_TranscriptionOptions,
        rhs: Stream_Video_Coordinator_CallV1_TranscriptionOptions
    ) -> Bool {
        if lhs._enabled != rhs._enabled { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
