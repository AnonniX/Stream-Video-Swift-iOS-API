//
// Copyright Â© 2022 Stream.io Inc. All rights reserved.
//

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

enum Stream_Video_PeerType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case publisher // = 0
    case subscriber // = 1
    case UNRECOGNIZED(Int)

    init() {
        self = .publisher
    }

    init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .publisher
        case 1: self = .subscriber
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    var rawValue: Int {
        switch self {
        case .publisher: return 0
        case .subscriber: return 1
        case let .UNRECOGNIZED(i): return i
        }
    }
}

#if swift(>=4.2)

extension Stream_Video_PeerType: CaseIterable {
    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static var allCases: [Stream_Video_PeerType] = [
        .publisher,
        .subscriber
    ]
}

#endif // swift(>=4.2)

enum Stream_Video_ConnectionQuality: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case bad // = 0
    case poor // = 1
    case good // = 2
    case UNRECOGNIZED(Int)

    init() {
        self = .bad
    }

    init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .bad
        case 1: self = .poor
        case 2: self = .good
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    var rawValue: Int {
        switch self {
        case .bad: return 0
        case .poor: return 1
        case .good: return 2
        case let .UNRECOGNIZED(i): return i
        }
    }
}

#if swift(>=4.2)

extension Stream_Video_ConnectionQuality: CaseIterable {
    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static var allCases: [Stream_Video_ConnectionQuality] = [
        .bad,
        .poor,
        .good
    ]
}

#endif // swift(>=4.2)

enum Stream_Video_VideoQuality: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case low // = 0
    case mid // = 1
    case high // = 2
    case UNRECOGNIZED(Int)

    init() {
        self = .low
    }

    init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .low
        case 1: self = .mid
        case 2: self = .high
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    var rawValue: Int {
        switch self {
        case .low: return 0
        case .mid: return 1
        case .high: return 2
        case let .UNRECOGNIZED(i): return i
        }
    }
}

#if swift(>=4.2)

extension Stream_Video_VideoQuality: CaseIterable {
    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static var allCases: [Stream_Video_VideoQuality] = [
        .low,
        .mid,
        .high
    ]
}

#endif // swift(>=4.2)

struct Stream_Video_StreamQuality {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var videoQuality: Stream_Video_VideoQuality = .low

    var userID: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_VideoDimension {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var width: UInt32 = 0

    var height: UInt32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_VideoLayer {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// for tracks with a single layer, this should be HIGH
    var quality: Stream_Video_VideoQuality = .low

    var videoDimension: Stream_Video_VideoDimension {
        get { _videoDimension ?? Stream_Video_VideoDimension() }
        set { _videoDimension = newValue }
    }

    /// Returns true if `videoDimension` has been explicitly set.
    var hasVideoDimension: Bool { self._videoDimension != nil }
    /// Clears the value of `videoDimension`. Subsequent reads from it will return its default value.
    mutating func clearVideoDimension() { _videoDimension = nil }

    /// target bitrate, server will measure actual
    var bitrate: UInt32 = 0

    var ssrc: UInt32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    private var _videoDimension: Stream_Video_VideoDimension?
}

struct Stream_Video_SimulcastCodecInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var mimeType: String = String()

    var mid: String = String()

    var cid: String = String()

    var layers: [Stream_Video_VideoLayer] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Codec1 {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var mime: String = String()

    var fmtpLine: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_SimulcastCodec {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stream_Video_PeerType: @unchecked Sendable {}
extension Stream_Video_ConnectionQuality: @unchecked Sendable {}
extension Stream_Video_VideoQuality: @unchecked Sendable {}
extension Stream_Video_StreamQuality: @unchecked Sendable {}
extension Stream_Video_VideoDimension: @unchecked Sendable {}
extension Stream_Video_VideoLayer: @unchecked Sendable {}
extension Stream_Video_SimulcastCodecInfo: @unchecked Sendable {}
extension Stream_Video_Codec1: @unchecked Sendable {}
extension Stream_Video_SimulcastCodec: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "stream.video"

extension Stream_Video_PeerType: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "PUBLISHER"),
        1: .same(proto: "SUBSCRIBER")
    ]
}

extension Stream_Video_ConnectionQuality: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "BAD"),
        1: .same(proto: "POOR"),
        2: .same(proto: "GOOD")
    ]
}

extension Stream_Video_VideoQuality: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "LOW"),
        1: .same(proto: "MID"),
        2: .same(proto: "HIGH")
    ]
}

extension Stream_Video_StreamQuality: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".StreamQuality"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "video_quality"),
        2: .standard(proto: "user_id")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularEnumField(value: &self.videoQuality) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if videoQuality != .low {
            try visitor.visitSingularEnumField(value: videoQuality, fieldNumber: 1)
        }
        if !userID.isEmpty {
            try visitor.visitSingularStringField(value: userID, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_StreamQuality, rhs: Stream_Video_StreamQuality) -> Bool {
        if lhs.videoQuality != rhs.videoQuality { return false }
        if lhs.userID != rhs.userID { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_VideoDimension: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".VideoDimension"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "width"),
        2: .same(proto: "height")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularUInt32Field(value: &self.width) }()
            case 2: try { try decoder.decodeSingularUInt32Field(value: &self.height) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if width != 0 {
            try visitor.visitSingularUInt32Field(value: width, fieldNumber: 1)
        }
        if height != 0 {
            try visitor.visitSingularUInt32Field(value: height, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_VideoDimension, rhs: Stream_Video_VideoDimension) -> Bool {
        if lhs.width != rhs.width { return false }
        if lhs.height != rhs.height { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_VideoLayer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".VideoLayer"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "quality"),
        2: .standard(proto: "video_dimension"),
        4: .same(proto: "bitrate"),
        5: .same(proto: "ssrc")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularEnumField(value: &self.quality) }()
            case 2: try { try decoder.decodeSingularMessageField(value: &self._videoDimension) }()
            case 4: try { try decoder.decodeSingularUInt32Field(value: &self.bitrate) }()
            case 5: try { try decoder.decodeSingularUInt32Field(value: &self.ssrc) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if quality != .low {
            try visitor.visitSingularEnumField(value: quality, fieldNumber: 1)
        }
        try { if let v = self._videoDimension {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        } }()
        if bitrate != 0 {
            try visitor.visitSingularUInt32Field(value: bitrate, fieldNumber: 4)
        }
        if ssrc != 0 {
            try visitor.visitSingularUInt32Field(value: ssrc, fieldNumber: 5)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_VideoLayer, rhs: Stream_Video_VideoLayer) -> Bool {
        if lhs.quality != rhs.quality { return false }
        if lhs._videoDimension != rhs._videoDimension { return false }
        if lhs.bitrate != rhs.bitrate { return false }
        if lhs.ssrc != rhs.ssrc { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_SimulcastCodecInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".SimulcastCodecInfo"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "mime_type"),
        2: .same(proto: "mid"),
        3: .same(proto: "cid"),
        4: .same(proto: "layers")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.mimeType) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.mid) }()
            case 3: try { try decoder.decodeSingularStringField(value: &self.cid) }()
            case 4: try { try decoder.decodeRepeatedMessageField(value: &self.layers) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !mimeType.isEmpty {
            try visitor.visitSingularStringField(value: mimeType, fieldNumber: 1)
        }
        if !mid.isEmpty {
            try visitor.visitSingularStringField(value: mid, fieldNumber: 2)
        }
        if !cid.isEmpty {
            try visitor.visitSingularStringField(value: cid, fieldNumber: 3)
        }
        if !layers.isEmpty {
            try visitor.visitRepeatedMessageField(value: layers, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_SimulcastCodecInfo, rhs: Stream_Video_SimulcastCodecInfo) -> Bool {
        if lhs.mimeType != rhs.mimeType { return false }
        if lhs.mid != rhs.mid { return false }
        if lhs.cid != rhs.cid { return false }
        if lhs.layers != rhs.layers { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Codec1: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".Codec1"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "mime"),
        2: .standard(proto: "fmtp_line")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.mime) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.fmtpLine) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !mime.isEmpty {
            try visitor.visitSingularStringField(value: mime, fieldNumber: 1)
        }
        if !fmtpLine.isEmpty {
            try visitor.visitSingularStringField(value: fmtpLine, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Codec1, rhs: Stream_Video_Codec1) -> Bool {
        if lhs.mime != rhs.mime { return false }
        if lhs.fmtpLine != rhs.fmtpLine { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_SimulcastCodec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".SimulcastCodec"
    static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_SimulcastCodec, rhs: Stream_Video_SimulcastCodec) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
