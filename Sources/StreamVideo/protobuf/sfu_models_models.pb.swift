//
// Copyright Â© 2022 Stream.io Inc. All rights reserved.
//

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

enum Stream_Video_Sfu_PeerType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case publisher // = 0
    case subscriber // = 1
    case UNRECOGNIZED(Int)

    init() {
        self = .publisher
    }

    init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .publisher
        case 1: self = .subscriber
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    var rawValue: Int {
        switch self {
        case .publisher: return 0
        case .subscriber: return 1
        case let .UNRECOGNIZED(i): return i
        }
    }
}

#if swift(>=4.2)

extension Stream_Video_Sfu_PeerType: CaseIterable {
    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static var allCases: [Stream_Video_Sfu_PeerType] = [
        .publisher,
        .subscriber
    ]
}

#endif // swift(>=4.2)

enum Stream_Video_Sfu_ConnectionQuality: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case bad // = 0
    case poor // = 1
    case good // = 2
    case UNRECOGNIZED(Int)

    init() {
        self = .bad
    }

    init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .bad
        case 1: self = .poor
        case 2: self = .good
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    var rawValue: Int {
        switch self {
        case .bad: return 0
        case .poor: return 1
        case .good: return 2
        case let .UNRECOGNIZED(i): return i
        }
    }
}

#if swift(>=4.2)

extension Stream_Video_Sfu_ConnectionQuality: CaseIterable {
    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static var allCases: [Stream_Video_Sfu_ConnectionQuality] = [
        .bad,
        .poor,
        .good
    ]
}

#endif // swift(>=4.2)

enum Stream_Video_Sfu_VideoQuality: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case low // = 0
    case mid // = 1
    case high // = 2
    case UNRECOGNIZED(Int)

    init() {
        self = .low
    }

    init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .low
        case 1: self = .mid
        case 2: self = .high
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    var rawValue: Int {
        switch self {
        case .low: return 0
        case .mid: return 1
        case .high: return 2
        case let .UNRECOGNIZED(i): return i
        }
    }
}

#if swift(>=4.2)

extension Stream_Video_Sfu_VideoQuality: CaseIterable {
    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static var allCases: [Stream_Video_Sfu_VideoQuality] = [
        .low,
        .mid,
        .high
    ]
}

#endif // swift(>=4.2)

struct Stream_Video_Sfu_CallState {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var participants: [Stream_Video_Sfu_Participant] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Sfu_Call {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// the call type
    var type: String = String()

    /// the call id
    var id: String = String()

    /// the id of the user that created this call
    var createdByUserID: String = String()

    /// the id of the current host for this call
    var hostUserID: String = String()

    var custom: SwiftProtobuf.Google_Protobuf_Struct {
        get { _custom ?? SwiftProtobuf.Google_Protobuf_Struct() }
        set { _custom = newValue }
    }

    /// Returns true if `custom` has been explicitly set.
    var hasCustom: Bool { self._custom != nil }
    /// Clears the value of `custom`. Subsequent reads from it will return its default value.
    mutating func clearCustom() { _custom = nil }

    /// call creation date as RFC3339 string
    var createdAt: String = String()

    /// call last update date as RFC3339 string
    var updatedAt: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _custom: SwiftProtobuf.Google_Protobuf_Struct?
}

/// those who are online in the call
struct Stream_Video_Sfu_Participant {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var user: Stream_Video_Sfu_User {
        get { _user ?? Stream_Video_Sfu_User() }
        set { _user = newValue }
    }

    /// Returns true if `user` has been explicitly set.
    var hasUser: Bool { self._user != nil }
    /// Clears the value of `user`. Subsequent reads from it will return its default value.
    mutating func clearUser() { _user = nil }

    var role: String = String()

    var online: Bool = false

    var custom: SwiftProtobuf.Google_Protobuf_Struct {
        get { _custom ?? SwiftProtobuf.Google_Protobuf_Struct() }
        set { _custom = newValue }
    }

    /// Returns true if `custom` has been explicitly set.
    var hasCustom: Bool { self._custom != nil }
    /// Clears the value of `custom`. Subsequent reads from it will return its default value.
    mutating func clearCustom() { _custom = nil }

    var video: Bool = false

    var audio: Bool = false

    /// call creation date as RFC3339 string
    var createdAt: String = String()

    /// call last update date as RFC3339 string
    var updatedAt: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    private var _user: Stream_Video_Sfu_User?
    fileprivate var _custom: SwiftProtobuf.Google_Protobuf_Struct?
}

struct Stream_Video_Sfu_User {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String = String()

    var teams: [String] = []

    var role: String = String()

    var custom: SwiftProtobuf.Google_Protobuf_Struct {
        get { _custom ?? SwiftProtobuf.Google_Protobuf_Struct() }
        set { _custom = newValue }
    }

    /// Returns true if `custom` has been explicitly set.
    var hasCustom: Bool { self._custom != nil }
    /// Clears the value of `custom`. Subsequent reads from it will return its default value.
    mutating func clearCustom() { _custom = nil }

    var name: String = String()

    var imageURL: String = String()

    /// user creation date as RFC3339 string
    var createdAt: String = String()

    /// user last update date as RFC3339 string
    var updatedAt: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _custom: SwiftProtobuf.Google_Protobuf_Struct?
}

struct Stream_Video_Sfu_StreamQuality {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var videoQuality: Stream_Video_Sfu_VideoQuality = .low

    var userID: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Sfu_VideoDimension {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var width: UInt32 = 0

    var height: UInt32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Sfu_VideoLayer {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// for tracks with a single layer, this should be HIGH
    var rid: String = String()

    var videoDimension: Stream_Video_Sfu_VideoDimension {
        get { _videoDimension ?? Stream_Video_Sfu_VideoDimension() }
        set { _videoDimension = newValue }
    }

    /// Returns true if `videoDimension` has been explicitly set.
    var hasVideoDimension: Bool { self._videoDimension != nil }
    /// Clears the value of `videoDimension`. Subsequent reads from it will return its default value.
    mutating func clearVideoDimension() { _videoDimension = nil }

    /// target bitrate, server will measure actual
    var bitrate: UInt32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    private var _videoDimension: Stream_Video_Sfu_VideoDimension?
}

struct Stream_Video_Sfu_SimulcastCodecInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var mimeType: String = String()

    var mid: String = String()

    var cid: String = String()

    var layers: [Stream_Video_Sfu_VideoLayer] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Sfu_Codec {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var mime: String = String()

    var fmtpLine: String = String()

    var clockRate: UInt32 = 0

    var hwAccelerated: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Sfu_AudioCodecs {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var encode: [Stream_Video_Sfu_Codec] = []

    var decode: [Stream_Video_Sfu_Codec] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Sfu_VideoCodecs {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var encode: [Stream_Video_Sfu_Codec] = []

    var decode: [Stream_Video_Sfu_Codec] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Sfu_CodecSettings {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var audio: Stream_Video_Sfu_AudioCodecs {
        get { _audio ?? Stream_Video_Sfu_AudioCodecs() }
        set { _audio = newValue }
    }

    /// Returns true if `audio` has been explicitly set.
    var hasAudio: Bool { self._audio != nil }
    /// Clears the value of `audio`. Subsequent reads from it will return its default value.
    mutating func clearAudio() { _audio = nil }

    var video: Stream_Video_Sfu_VideoCodecs {
        get { _video ?? Stream_Video_Sfu_VideoCodecs() }
        set { _video = newValue }
    }

    /// Returns true if `video` has been explicitly set.
    var hasVideo: Bool { self._video != nil }
    /// Clears the value of `video`. Subsequent reads from it will return its default value.
    mutating func clearVideo() { _video = nil }

    var layers: [Stream_Video_Sfu_VideoLayer] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    private var _audio: Stream_Video_Sfu_AudioCodecs?
    private var _video: Stream_Video_Sfu_VideoCodecs?
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stream_Video_Sfu_PeerType: @unchecked Sendable {}
extension Stream_Video_Sfu_ConnectionQuality: @unchecked Sendable {}
extension Stream_Video_Sfu_VideoQuality: @unchecked Sendable {}
extension Stream_Video_Sfu_CallState: @unchecked Sendable {}
extension Stream_Video_Sfu_Call: @unchecked Sendable {}
extension Stream_Video_Sfu_Participant: @unchecked Sendable {}
extension Stream_Video_Sfu_User: @unchecked Sendable {}
extension Stream_Video_Sfu_StreamQuality: @unchecked Sendable {}
extension Stream_Video_Sfu_VideoDimension: @unchecked Sendable {}
extension Stream_Video_Sfu_VideoLayer: @unchecked Sendable {}
extension Stream_Video_Sfu_SimulcastCodecInfo: @unchecked Sendable {}
extension Stream_Video_Sfu_Codec: @unchecked Sendable {}
extension Stream_Video_Sfu_AudioCodecs: @unchecked Sendable {}
extension Stream_Video_Sfu_VideoCodecs: @unchecked Sendable {}
extension Stream_Video_Sfu_CodecSettings: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "stream.video.sfu"

extension Stream_Video_Sfu_PeerType: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "PUBLISHER"),
        1: .same(proto: "SUBSCRIBER")
    ]
}

extension Stream_Video_Sfu_ConnectionQuality: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "BAD"),
        1: .same(proto: "POOR"),
        2: .same(proto: "GOOD")
    ]
}

extension Stream_Video_Sfu_VideoQuality: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "LOW"),
        1: .same(proto: "MID"),
        2: .same(proto: "HIGH")
    ]
}

extension Stream_Video_Sfu_CallState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".CallState"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "participants")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeRepeatedMessageField(value: &self.participants) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !participants.isEmpty {
            try visitor.visitRepeatedMessageField(value: participants, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_CallState, rhs: Stream_Video_Sfu_CallState) -> Bool {
        if lhs.participants != rhs.participants { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_Call: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".Call"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "type"),
        2: .same(proto: "id"),
        3: .standard(proto: "created_by_user_id"),
        4: .standard(proto: "host_user_id"),
        5: .same(proto: "custom"),
        6: .standard(proto: "created_at"),
        7: .standard(proto: "updated_at")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.type) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.id) }()
            case 3: try { try decoder.decodeSingularStringField(value: &self.createdByUserID) }()
            case 4: try { try decoder.decodeSingularStringField(value: &self.hostUserID) }()
            case 5: try { try decoder.decodeSingularMessageField(value: &self._custom) }()
            case 6: try { try decoder.decodeSingularStringField(value: &self.createdAt) }()
            case 7: try { try decoder.decodeSingularStringField(value: &self.updatedAt) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !type.isEmpty {
            try visitor.visitSingularStringField(value: type, fieldNumber: 1)
        }
        if !id.isEmpty {
            try visitor.visitSingularStringField(value: id, fieldNumber: 2)
        }
        if !createdByUserID.isEmpty {
            try visitor.visitSingularStringField(value: createdByUserID, fieldNumber: 3)
        }
        if !hostUserID.isEmpty {
            try visitor.visitSingularStringField(value: hostUserID, fieldNumber: 4)
        }
        try { if let v = self._custom {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
        } }()
        if !createdAt.isEmpty {
            try visitor.visitSingularStringField(value: createdAt, fieldNumber: 6)
        }
        if !updatedAt.isEmpty {
            try visitor.visitSingularStringField(value: updatedAt, fieldNumber: 7)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_Call, rhs: Stream_Video_Sfu_Call) -> Bool {
        if lhs.type != rhs.type { return false }
        if lhs.id != rhs.id { return false }
        if lhs.createdByUserID != rhs.createdByUserID { return false }
        if lhs.hostUserID != rhs.hostUserID { return false }
        if lhs._custom != rhs._custom { return false }
        if lhs.createdAt != rhs.createdAt { return false }
        if lhs.updatedAt != rhs.updatedAt { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_Participant: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".Participant"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "user"),
        2: .same(proto: "role"),
        3: .same(proto: "online"),
        4: .same(proto: "custom"),
        5: .same(proto: "video"),
        6: .same(proto: "audio"),
        7: .standard(proto: "created_at"),
        8: .standard(proto: "updated_at")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularMessageField(value: &self._user) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.role) }()
            case 3: try { try decoder.decodeSingularBoolField(value: &self.online) }()
            case 4: try { try decoder.decodeSingularMessageField(value: &self._custom) }()
            case 5: try { try decoder.decodeSingularBoolField(value: &self.video) }()
            case 6: try { try decoder.decodeSingularBoolField(value: &self.audio) }()
            case 7: try { try decoder.decodeSingularStringField(value: &self.createdAt) }()
            case 8: try { try decoder.decodeSingularStringField(value: &self.updatedAt) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._user {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        if !role.isEmpty {
            try visitor.visitSingularStringField(value: role, fieldNumber: 2)
        }
        if online != false {
            try visitor.visitSingularBoolField(value: online, fieldNumber: 3)
        }
        try { if let v = self._custom {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
        } }()
        if video != false {
            try visitor.visitSingularBoolField(value: video, fieldNumber: 5)
        }
        if audio != false {
            try visitor.visitSingularBoolField(value: audio, fieldNumber: 6)
        }
        if !createdAt.isEmpty {
            try visitor.visitSingularStringField(value: createdAt, fieldNumber: 7)
        }
        if !updatedAt.isEmpty {
            try visitor.visitSingularStringField(value: updatedAt, fieldNumber: 8)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_Participant, rhs: Stream_Video_Sfu_Participant) -> Bool {
        if lhs._user != rhs._user { return false }
        if lhs.role != rhs.role { return false }
        if lhs.online != rhs.online { return false }
        if lhs._custom != rhs._custom { return false }
        if lhs.video != rhs.video { return false }
        if lhs.audio != rhs.audio { return false }
        if lhs.createdAt != rhs.createdAt { return false }
        if lhs.updatedAt != rhs.updatedAt { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_User: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".User"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id"),
        2: .same(proto: "teams"),
        3: .same(proto: "role"),
        4: .same(proto: "custom"),
        5: .same(proto: "name"),
        6: .standard(proto: "image_url"),
        7: .standard(proto: "created_at"),
        8: .standard(proto: "updated_at")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
            case 2: try { try decoder.decodeRepeatedStringField(value: &self.teams) }()
            case 3: try { try decoder.decodeSingularStringField(value: &self.role) }()
            case 4: try { try decoder.decodeSingularMessageField(value: &self._custom) }()
            case 5: try { try decoder.decodeSingularStringField(value: &self.name) }()
            case 6: try { try decoder.decodeSingularStringField(value: &self.imageURL) }()
            case 7: try { try decoder.decodeSingularStringField(value: &self.createdAt) }()
            case 8: try { try decoder.decodeSingularStringField(value: &self.updatedAt) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !id.isEmpty {
            try visitor.visitSingularStringField(value: id, fieldNumber: 1)
        }
        if !teams.isEmpty {
            try visitor.visitRepeatedStringField(value: teams, fieldNumber: 2)
        }
        if !role.isEmpty {
            try visitor.visitSingularStringField(value: role, fieldNumber: 3)
        }
        try { if let v = self._custom {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
        } }()
        if !name.isEmpty {
            try visitor.visitSingularStringField(value: name, fieldNumber: 5)
        }
        if !imageURL.isEmpty {
            try visitor.visitSingularStringField(value: imageURL, fieldNumber: 6)
        }
        if !createdAt.isEmpty {
            try visitor.visitSingularStringField(value: createdAt, fieldNumber: 7)
        }
        if !updatedAt.isEmpty {
            try visitor.visitSingularStringField(value: updatedAt, fieldNumber: 8)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_User, rhs: Stream_Video_Sfu_User) -> Bool {
        if lhs.id != rhs.id { return false }
        if lhs.teams != rhs.teams { return false }
        if lhs.role != rhs.role { return false }
        if lhs._custom != rhs._custom { return false }
        if lhs.name != rhs.name { return false }
        if lhs.imageURL != rhs.imageURL { return false }
        if lhs.createdAt != rhs.createdAt { return false }
        if lhs.updatedAt != rhs.updatedAt { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_StreamQuality: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".StreamQuality"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "video_quality"),
        2: .standard(proto: "user_id")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularEnumField(value: &self.videoQuality) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if videoQuality != .low {
            try visitor.visitSingularEnumField(value: videoQuality, fieldNumber: 1)
        }
        if !userID.isEmpty {
            try visitor.visitSingularStringField(value: userID, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_StreamQuality, rhs: Stream_Video_Sfu_StreamQuality) -> Bool {
        if lhs.videoQuality != rhs.videoQuality { return false }
        if lhs.userID != rhs.userID { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_VideoDimension: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".VideoDimension"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "width"),
        2: .same(proto: "height")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularUInt32Field(value: &self.width) }()
            case 2: try { try decoder.decodeSingularUInt32Field(value: &self.height) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if width != 0 {
            try visitor.visitSingularUInt32Field(value: width, fieldNumber: 1)
        }
        if height != 0 {
            try visitor.visitSingularUInt32Field(value: height, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_VideoDimension, rhs: Stream_Video_Sfu_VideoDimension) -> Bool {
        if lhs.width != rhs.width { return false }
        if lhs.height != rhs.height { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_VideoLayer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".VideoLayer"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "rid"),
        2: .standard(proto: "video_dimension"),
        4: .same(proto: "bitrate")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.rid) }()
            case 2: try { try decoder.decodeSingularMessageField(value: &self._videoDimension) }()
            case 4: try { try decoder.decodeSingularUInt32Field(value: &self.bitrate) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !rid.isEmpty {
            try visitor.visitSingularStringField(value: rid, fieldNumber: 1)
        }
        try { if let v = self._videoDimension {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        } }()
        if bitrate != 0 {
            try visitor.visitSingularUInt32Field(value: bitrate, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_VideoLayer, rhs: Stream_Video_Sfu_VideoLayer) -> Bool {
        if lhs.rid != rhs.rid { return false }
        if lhs._videoDimension != rhs._videoDimension { return false }
        if lhs.bitrate != rhs.bitrate { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_SimulcastCodecInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".SimulcastCodecInfo"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "mime_type"),
        2: .same(proto: "mid"),
        3: .same(proto: "cid"),
        4: .same(proto: "layers")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.mimeType) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.mid) }()
            case 3: try { try decoder.decodeSingularStringField(value: &self.cid) }()
            case 4: try { try decoder.decodeRepeatedMessageField(value: &self.layers) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !mimeType.isEmpty {
            try visitor.visitSingularStringField(value: mimeType, fieldNumber: 1)
        }
        if !mid.isEmpty {
            try visitor.visitSingularStringField(value: mid, fieldNumber: 2)
        }
        if !cid.isEmpty {
            try visitor.visitSingularStringField(value: cid, fieldNumber: 3)
        }
        if !layers.isEmpty {
            try visitor.visitRepeatedMessageField(value: layers, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_SimulcastCodecInfo, rhs: Stream_Video_Sfu_SimulcastCodecInfo) -> Bool {
        if lhs.mimeType != rhs.mimeType { return false }
        if lhs.mid != rhs.mid { return false }
        if lhs.cid != rhs.cid { return false }
        if lhs.layers != rhs.layers { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_Codec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".Codec"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "mime"),
        2: .standard(proto: "fmtp_line"),
        3: .standard(proto: "clock_rate"),
        4: .standard(proto: "hw_accelerated")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.mime) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.fmtpLine) }()
            case 3: try { try decoder.decodeSingularUInt32Field(value: &self.clockRate) }()
            case 4: try { try decoder.decodeSingularBoolField(value: &self.hwAccelerated) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !mime.isEmpty {
            try visitor.visitSingularStringField(value: mime, fieldNumber: 1)
        }
        if !fmtpLine.isEmpty {
            try visitor.visitSingularStringField(value: fmtpLine, fieldNumber: 2)
        }
        if clockRate != 0 {
            try visitor.visitSingularUInt32Field(value: clockRate, fieldNumber: 3)
        }
        if hwAccelerated != false {
            try visitor.visitSingularBoolField(value: hwAccelerated, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_Codec, rhs: Stream_Video_Sfu_Codec) -> Bool {
        if lhs.mime != rhs.mime { return false }
        if lhs.fmtpLine != rhs.fmtpLine { return false }
        if lhs.clockRate != rhs.clockRate { return false }
        if lhs.hwAccelerated != rhs.hwAccelerated { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_AudioCodecs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".AudioCodecs"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "encode"),
        2: .same(proto: "decode")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeRepeatedMessageField(value: &self.encode) }()
            case 2: try { try decoder.decodeRepeatedMessageField(value: &self.decode) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !encode.isEmpty {
            try visitor.visitRepeatedMessageField(value: encode, fieldNumber: 1)
        }
        if !decode.isEmpty {
            try visitor.visitRepeatedMessageField(value: decode, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_AudioCodecs, rhs: Stream_Video_Sfu_AudioCodecs) -> Bool {
        if lhs.encode != rhs.encode { return false }
        if lhs.decode != rhs.decode { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_VideoCodecs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".VideoCodecs"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "encode"),
        2: .same(proto: "decode")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeRepeatedMessageField(value: &self.encode) }()
            case 2: try { try decoder.decodeRepeatedMessageField(value: &self.decode) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !encode.isEmpty {
            try visitor.visitRepeatedMessageField(value: encode, fieldNumber: 1)
        }
        if !decode.isEmpty {
            try visitor.visitRepeatedMessageField(value: decode, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_VideoCodecs, rhs: Stream_Video_Sfu_VideoCodecs) -> Bool {
        if lhs.encode != rhs.encode { return false }
        if lhs.decode != rhs.decode { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Sfu_CodecSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".CodecSettings"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "audio"),
        2: .same(proto: "video"),
        3: .same(proto: "layers")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularMessageField(value: &self._audio) }()
            case 2: try { try decoder.decodeSingularMessageField(value: &self._video) }()
            case 3: try { try decoder.decodeRepeatedMessageField(value: &self.layers) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._audio {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        try { if let v = self._video {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        } }()
        if !layers.isEmpty {
            try visitor.visitRepeatedMessageField(value: layers, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Sfu_CodecSettings, rhs: Stream_Video_Sfu_CodecSettings) -> Bool {
        if lhs._audio != rhs._audio { return false }
        if lhs._video != rhs._video { return false }
        if lhs.layers != rhs.layers { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
