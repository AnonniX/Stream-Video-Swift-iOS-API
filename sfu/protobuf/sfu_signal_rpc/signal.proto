syntax = "proto3";

package stream.video;

option go_package = "github.com/GetStream/video-sfu/protobuf/sfu_signal_rpc";

import "sfu_models/models.proto";

service SignalServer {
  // Join sets up the peer connection that is used to subscribe to A/V and the data channel for signaling
  // in WebRTC terms, this contains the SDP offer for the user peer connection
  rpc Join(JoinRequest) returns (JoinResponse);

  // SetPublisher sends the WebRTC offer for the peer connection used to publish A/V
  rpc SetPublisher(SetPublisherRequest) returns (SetPublisherResponse);

  rpc SendAnswer(SendAnswerRequest) returns (SendAnswerResponse);

  rpc SendIceCandidate(IceCandidateRequest) returns (IceCandidateResponse);

  // UpdateSubscriberScreenSize is used to notify the SFU about the video dimension the subscriber wants to receive
  rpc UpdateSubscriberScreenSize(UpdateSubscriberQualityRequest) returns (UpdateSubscriberScreenSizeResponse);

  rpc UpdateMuteState(UpdateMuteStateRequest) returns (UpdateMuteStateResponse);

  rpc RequestVideoQuality(UpdateVideoQualityRequest) returns (UpdateVideoQualityResponse);
}

message UpdateVideoQualityRequest{
  repeated StreamQuality stream_qualities = 1;
  string session_id = 2;
}

message UpdateVideoQualityResponse{

}

message UpdateMuteStateRequest{
  string session_id = 1;
  oneof mute {
    AudioMuteChanged  audio_mute_changed = 2;
    VideoMuteChanged  video_mute_changed = 3;
  }
}

message UpdateMuteStateResponse{

}

message AudioMuteChanged {
  bool muted = 1;
}

message VideoMuteChanged {
  bool muted = 2;
}

message UpdateSubscriberQualityRequest {
  // maps stream ids to its size
  map<string, VideoDimension> dimension_by_stream_id = 1;
  // the default dimension for the stream not present in dimension_by_stream_id
  VideoQuality default_dimension = 2;
  string session_id = 4;
}

message SendAnswerRequest {
  PeerType peer_type = 1;
  string sdp = 2;
  string session_id = 4;
}

message SendAnswerResponse {

}

message IceCandidateRequest{
  // TODO: use PeerTYPE!
  bool publisher = 1;
  string candidate = 2 ;
  string sdpMid = 3;
  uint32 sdpMLineIndex = 4;
  string usernameFragment = 5;
  string session_id = 7;
}

message IceCandidateResponse{

}

message UpdateSubscriberScreenSizeResponse {}

message SetPublisherRequest {
  // sdp offer
  string sdp = 1;
  string session_id = 3;
}

message SetPublisherResponse {
  // sdp answer
  string sdp = 1;
  string session_id = 3;
}

message JoinRequest {
  string subscriber_sdp_offer = 1;
  string session_id = 3;

  // TODO: we should know if this is going to be
  // - publishing and subscribing, or just subscribing for future routing
}

message JoinResponse {
  string sdp = 1;
}

message ConnectRequest {
  // peer connection sdp offer
  string sdp_offer = 1;
  // token used for authentication
  string token = 2;
}

message ConnectResponse {
  // sdp answer
  string sdp_answer = 1;
}

// Signaling related payload, all these messages will be exchanged using signaling channel
message SignalRequest {
  oneof event_payload {
    SubscribeRequest subscribe = 1;
    PublishRequest publish = 2;
  }
}

message SignalEvent {
  oneof event_payload {
    SubscribeResponse subscribe = 1;
    PublishResponse publish = 2;
  }
}
// SubscribeRequest
message SubscribeRequest {
  string token = 1;
  string sdp_offer = 2;
  // preferred quality
  string quality = 3;
}

// SubscribeResponse
message SubscribeResponse {
  // preferred quality
  string quality = 2;
}

message PublishRequest {
  string token = 1;
  string sdp_offer = 2;
}

message PublishResponse {
  string sdp_answer = 2;
}