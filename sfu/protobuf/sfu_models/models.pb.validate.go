// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: sfu_models/models.proto

package sfu_models

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on StreamQuality with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StreamQuality) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamQuality with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StreamQualityMultiError, or
// nil if none found.
func (m *StreamQuality) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamQuality) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VideoQuality

	// no validation rules for UserId

	if len(errors) > 0 {
		return StreamQualityMultiError(errors)
	}

	return nil
}

// StreamQualityMultiError is an error wrapping multiple validation errors
// returned by StreamQuality.ValidateAll() if the designated constraints
// aren't met.
type StreamQualityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamQualityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamQualityMultiError) AllErrors() []error { return m }

// StreamQualityValidationError is the validation error returned by
// StreamQuality.Validate if the designated constraints aren't met.
type StreamQualityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamQualityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamQualityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamQualityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamQualityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamQualityValidationError) ErrorName() string { return "StreamQualityValidationError" }

// Error satisfies the builtin error interface
func (e StreamQualityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamQuality.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamQualityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamQualityValidationError{}

// Validate checks the field values on VideoDimension with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VideoDimension) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoDimension with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VideoDimensionMultiError,
// or nil if none found.
func (m *VideoDimension) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoDimension) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Width

	// no validation rules for Height

	if len(errors) > 0 {
		return VideoDimensionMultiError(errors)
	}

	return nil
}

// VideoDimensionMultiError is an error wrapping multiple validation errors
// returned by VideoDimension.ValidateAll() if the designated constraints
// aren't met.
type VideoDimensionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoDimensionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoDimensionMultiError) AllErrors() []error { return m }

// VideoDimensionValidationError is the validation error returned by
// VideoDimension.Validate if the designated constraints aren't met.
type VideoDimensionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoDimensionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoDimensionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoDimensionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoDimensionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoDimensionValidationError) ErrorName() string { return "VideoDimensionValidationError" }

// Error satisfies the builtin error interface
func (e VideoDimensionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoDimension.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoDimensionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoDimensionValidationError{}

// Validate checks the field values on VideoLayer with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VideoLayer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoLayer with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VideoLayerMultiError, or
// nil if none found.
func (m *VideoLayer) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoLayer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Quality

	if all {
		switch v := interface{}(m.GetVideoDimension()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VideoLayerValidationError{
					field:  "VideoDimension",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VideoLayerValidationError{
					field:  "VideoDimension",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVideoDimension()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VideoLayerValidationError{
				field:  "VideoDimension",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Bitrate

	// no validation rules for Ssrc

	if len(errors) > 0 {
		return VideoLayerMultiError(errors)
	}

	return nil
}

// VideoLayerMultiError is an error wrapping multiple validation errors
// returned by VideoLayer.ValidateAll() if the designated constraints aren't met.
type VideoLayerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoLayerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoLayerMultiError) AllErrors() []error { return m }

// VideoLayerValidationError is the validation error returned by
// VideoLayer.Validate if the designated constraints aren't met.
type VideoLayerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoLayerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoLayerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoLayerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoLayerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoLayerValidationError) ErrorName() string { return "VideoLayerValidationError" }

// Error satisfies the builtin error interface
func (e VideoLayerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoLayer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoLayerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoLayerValidationError{}

// Validate checks the field values on SimulcastCodecInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SimulcastCodecInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SimulcastCodecInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SimulcastCodecInfoMultiError, or nil if none found.
func (m *SimulcastCodecInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SimulcastCodecInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MimeType

	// no validation rules for Mid

	// no validation rules for Cid

	for idx, item := range m.GetLayers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SimulcastCodecInfoValidationError{
						field:  fmt.Sprintf("Layers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SimulcastCodecInfoValidationError{
						field:  fmt.Sprintf("Layers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SimulcastCodecInfoValidationError{
					field:  fmt.Sprintf("Layers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SimulcastCodecInfoMultiError(errors)
	}

	return nil
}

// SimulcastCodecInfoMultiError is an error wrapping multiple validation errors
// returned by SimulcastCodecInfo.ValidateAll() if the designated constraints
// aren't met.
type SimulcastCodecInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SimulcastCodecInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SimulcastCodecInfoMultiError) AllErrors() []error { return m }

// SimulcastCodecInfoValidationError is the validation error returned by
// SimulcastCodecInfo.Validate if the designated constraints aren't met.
type SimulcastCodecInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SimulcastCodecInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SimulcastCodecInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SimulcastCodecInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SimulcastCodecInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SimulcastCodecInfoValidationError) ErrorName() string {
	return "SimulcastCodecInfoValidationError"
}

// Error satisfies the builtin error interface
func (e SimulcastCodecInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSimulcastCodecInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SimulcastCodecInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SimulcastCodecInfoValidationError{}

// Validate checks the field values on Codec with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Codec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Codec with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CodecMultiError, or nil if none found.
func (m *Codec) ValidateAll() error {
	return m.validate(true)
}

func (m *Codec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mime

	// no validation rules for FmtpLine

	if len(errors) > 0 {
		return CodecMultiError(errors)
	}

	return nil
}

// CodecMultiError is an error wrapping multiple validation errors returned by
// Codec.ValidateAll() if the designated constraints aren't met.
type CodecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CodecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CodecMultiError) AllErrors() []error { return m }

// CodecValidationError is the validation error returned by Codec.Validate if
// the designated constraints aren't met.
type CodecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CodecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CodecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CodecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CodecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CodecValidationError) ErrorName() string { return "CodecValidationError" }

// Error satisfies the builtin error interface
func (e CodecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCodec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CodecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CodecValidationError{}

// Validate checks the field values on SimulcastCodec with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SimulcastCodec) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SimulcastCodec with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SimulcastCodecMultiError,
// or nil if none found.
func (m *SimulcastCodec) ValidateAll() error {
	return m.validate(true)
}

func (m *SimulcastCodec) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SimulcastCodecMultiError(errors)
	}

	return nil
}

// SimulcastCodecMultiError is an error wrapping multiple validation errors
// returned by SimulcastCodec.ValidateAll() if the designated constraints
// aren't met.
type SimulcastCodecMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SimulcastCodecMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SimulcastCodecMultiError) AllErrors() []error { return m }

// SimulcastCodecValidationError is the validation error returned by
// SimulcastCodec.Validate if the designated constraints aren't met.
type SimulcastCodecValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SimulcastCodecValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SimulcastCodecValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SimulcastCodecValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SimulcastCodecValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SimulcastCodecValidationError) ErrorName() string { return "SimulcastCodecValidationError" }

// Error satisfies the builtin error interface
func (e SimulcastCodecValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSimulcastCodec.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SimulcastCodecValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SimulcastCodecValidationError{}
