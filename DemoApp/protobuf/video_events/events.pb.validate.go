// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: video_events/events.proto

package video_events

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CallRinging with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CallRinging) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallRinging with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CallRingingMultiError, or
// nil if none found.
func (m *CallRinging) ValidateAll() error {
	return m.validate(true)
}

func (m *CallRinging) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallRingingValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallRingingValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallRingingValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CallRingingMultiError(errors)
	}

	return nil
}

// CallRingingMultiError is an error wrapping multiple validation errors
// returned by CallRinging.ValidateAll() if the designated constraints aren't met.
type CallRingingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallRingingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallRingingMultiError) AllErrors() []error { return m }

// CallRingingValidationError is the validation error returned by
// CallRinging.Validate if the designated constraints aren't met.
type CallRingingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallRingingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallRingingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallRingingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallRingingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallRingingValidationError) ErrorName() string { return "CallRingingValidationError" }

// Error satisfies the builtin error interface
func (e CallRingingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallRinging.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallRingingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallRingingValidationError{}

// Validate checks the field values on CallCreated with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CallCreated) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallCreated with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CallCreatedMultiError, or
// nil if none found.
func (m *CallCreated) ValidateAll() error {
	return m.validate(true)
}

func (m *CallCreated) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallCreatedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallCreatedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallCreatedValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CallCreatedMultiError(errors)
	}

	return nil
}

// CallCreatedMultiError is an error wrapping multiple validation errors
// returned by CallCreated.ValidateAll() if the designated constraints aren't met.
type CallCreatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallCreatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallCreatedMultiError) AllErrors() []error { return m }

// CallCreatedValidationError is the validation error returned by
// CallCreated.Validate if the designated constraints aren't met.
type CallCreatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallCreatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallCreatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallCreatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallCreatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallCreatedValidationError) ErrorName() string { return "CallCreatedValidationError" }

// Error satisfies the builtin error interface
func (e CallCreatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallCreated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallCreatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallCreatedValidationError{}

// Validate checks the field values on CallUpdated with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CallUpdated) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallUpdated with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CallUpdatedMultiError, or
// nil if none found.
func (m *CallUpdated) ValidateAll() error {
	return m.validate(true)
}

func (m *CallUpdated) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallUpdatedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallUpdatedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallUpdatedValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CallUpdatedMultiError(errors)
	}

	return nil
}

// CallUpdatedMultiError is an error wrapping multiple validation errors
// returned by CallUpdated.ValidateAll() if the designated constraints aren't met.
type CallUpdatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallUpdatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallUpdatedMultiError) AllErrors() []error { return m }

// CallUpdatedValidationError is the validation error returned by
// CallUpdated.Validate if the designated constraints aren't met.
type CallUpdatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallUpdatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallUpdatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallUpdatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallUpdatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallUpdatedValidationError) ErrorName() string { return "CallUpdatedValidationError" }

// Error satisfies the builtin error interface
func (e CallUpdatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallUpdated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallUpdatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallUpdatedValidationError{}

// Validate checks the field values on CallEnded with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CallEnded) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallEnded with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CallEndedMultiError, or nil
// if none found.
func (m *CallEnded) ValidateAll() error {
	return m.validate(true)
}

func (m *CallEnded) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallEndedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallEndedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallEndedValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CallEndedMultiError(errors)
	}

	return nil
}

// CallEndedMultiError is an error wrapping multiple validation errors returned
// by CallEnded.ValidateAll() if the designated constraints aren't met.
type CallEndedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallEndedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallEndedMultiError) AllErrors() []error { return m }

// CallEndedValidationError is the validation error returned by
// CallEnded.Validate if the designated constraints aren't met.
type CallEndedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallEndedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallEndedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallEndedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallEndedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallEndedValidationError) ErrorName() string { return "CallEndedValidationError" }

// Error satisfies the builtin error interface
func (e CallEndedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallEnded.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallEndedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallEndedValidationError{}

// Validate checks the field values on CallDeleted with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CallDeleted) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallDeleted with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CallDeletedMultiError, or
// nil if none found.
func (m *CallDeleted) ValidateAll() error {
	return m.validate(true)
}

func (m *CallDeleted) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCall()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CallDeletedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CallDeletedValidationError{
					field:  "Call",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCall()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CallDeletedValidationError{
				field:  "Call",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CallDeletedMultiError(errors)
	}

	return nil
}

// CallDeletedMultiError is an error wrapping multiple validation errors
// returned by CallDeleted.ValidateAll() if the designated constraints aren't met.
type CallDeletedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallDeletedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallDeletedMultiError) AllErrors() []error { return m }

// CallDeletedValidationError is the validation error returned by
// CallDeleted.Validate if the designated constraints aren't met.
type CallDeletedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallDeletedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallDeletedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallDeletedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallDeletedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallDeletedValidationError) ErrorName() string { return "CallDeletedValidationError" }

// Error satisfies the builtin error interface
func (e CallDeletedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallDeleted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallDeletedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallDeletedValidationError{}

// Validate checks the field values on UserUpdated with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserUpdated) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserUpdated with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserUpdatedMultiError, or
// nil if none found.
func (m *UserUpdated) ValidateAll() error {
	return m.validate(true)
}

func (m *UserUpdated) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserUpdatedValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserUpdatedValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserUpdatedValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserUpdatedMultiError(errors)
	}

	return nil
}

// UserUpdatedMultiError is an error wrapping multiple validation errors
// returned by UserUpdated.ValidateAll() if the designated constraints aren't met.
type UserUpdatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserUpdatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserUpdatedMultiError) AllErrors() []error { return m }

// UserUpdatedValidationError is the validation error returned by
// UserUpdated.Validate if the designated constraints aren't met.
type UserUpdatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserUpdatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserUpdatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserUpdatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserUpdatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserUpdatedValidationError) ErrorName() string { return "UserUpdatedValidationError" }

// Error satisfies the builtin error interface
func (e UserUpdatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserUpdated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserUpdatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserUpdatedValidationError{}

// Validate checks the field values on ParticipantInvited with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ParticipantInvited) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParticipantInvited with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ParticipantInvitedMultiError, or nil if none found.
func (m *ParticipantInvited) ValidateAll() error {
	return m.validate(true)
}

func (m *ParticipantInvited) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParticipant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ParticipantInvitedValidationError{
					field:  "Participant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ParticipantInvitedValidationError{
					field:  "Participant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParticipant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ParticipantInvitedValidationError{
				field:  "Participant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ParticipantInvitedMultiError(errors)
	}

	return nil
}

// ParticipantInvitedMultiError is an error wrapping multiple validation errors
// returned by ParticipantInvited.ValidateAll() if the designated constraints
// aren't met.
type ParticipantInvitedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParticipantInvitedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParticipantInvitedMultiError) AllErrors() []error { return m }

// ParticipantInvitedValidationError is the validation error returned by
// ParticipantInvited.Validate if the designated constraints aren't met.
type ParticipantInvitedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParticipantInvitedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParticipantInvitedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParticipantInvitedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParticipantInvitedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParticipantInvitedValidationError) ErrorName() string {
	return "ParticipantInvitedValidationError"
}

// Error satisfies the builtin error interface
func (e ParticipantInvitedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParticipantInvited.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParticipantInvitedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParticipantInvitedValidationError{}

// Validate checks the field values on ParticipantUpdated with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ParticipantUpdated) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParticipantUpdated with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ParticipantUpdatedMultiError, or nil if none found.
func (m *ParticipantUpdated) ValidateAll() error {
	return m.validate(true)
}

func (m *ParticipantUpdated) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParticipant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ParticipantUpdatedValidationError{
					field:  "Participant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ParticipantUpdatedValidationError{
					field:  "Participant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParticipant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ParticipantUpdatedValidationError{
				field:  "Participant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ParticipantUpdatedMultiError(errors)
	}

	return nil
}

// ParticipantUpdatedMultiError is an error wrapping multiple validation errors
// returned by ParticipantUpdated.ValidateAll() if the designated constraints
// aren't met.
type ParticipantUpdatedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParticipantUpdatedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParticipantUpdatedMultiError) AllErrors() []error { return m }

// ParticipantUpdatedValidationError is the validation error returned by
// ParticipantUpdated.Validate if the designated constraints aren't met.
type ParticipantUpdatedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParticipantUpdatedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParticipantUpdatedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParticipantUpdatedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParticipantUpdatedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParticipantUpdatedValidationError) ErrorName() string {
	return "ParticipantUpdatedValidationError"
}

// Error satisfies the builtin error interface
func (e ParticipantUpdatedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParticipantUpdated.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParticipantUpdatedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParticipantUpdatedValidationError{}

// Validate checks the field values on ParticipantDeleted with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ParticipantDeleted) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParticipantDeleted with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ParticipantDeletedMultiError, or nil if none found.
func (m *ParticipantDeleted) ValidateAll() error {
	return m.validate(true)
}

func (m *ParticipantDeleted) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return ParticipantDeletedMultiError(errors)
	}

	return nil
}

// ParticipantDeletedMultiError is an error wrapping multiple validation errors
// returned by ParticipantDeleted.ValidateAll() if the designated constraints
// aren't met.
type ParticipantDeletedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParticipantDeletedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParticipantDeletedMultiError) AllErrors() []error { return m }

// ParticipantDeletedValidationError is the validation error returned by
// ParticipantDeleted.Validate if the designated constraints aren't met.
type ParticipantDeletedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParticipantDeletedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParticipantDeletedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParticipantDeletedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParticipantDeletedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParticipantDeletedValidationError) ErrorName() string {
	return "ParticipantDeletedValidationError"
}

// Error satisfies the builtin error interface
func (e ParticipantDeletedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParticipantDeleted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParticipantDeletedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParticipantDeletedValidationError{}

// Validate checks the field values on ParticipantJoined with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ParticipantJoined) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParticipantJoined with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ParticipantJoinedMultiError, or nil if none found.
func (m *ParticipantJoined) ValidateAll() error {
	return m.validate(true)
}

func (m *ParticipantJoined) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParticipant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ParticipantJoinedValidationError{
					field:  "Participant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ParticipantJoinedValidationError{
					field:  "Participant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParticipant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ParticipantJoinedValidationError{
				field:  "Participant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ParticipantJoinedMultiError(errors)
	}

	return nil
}

// ParticipantJoinedMultiError is an error wrapping multiple validation errors
// returned by ParticipantJoined.ValidateAll() if the designated constraints
// aren't met.
type ParticipantJoinedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParticipantJoinedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParticipantJoinedMultiError) AllErrors() []error { return m }

// ParticipantJoinedValidationError is the validation error returned by
// ParticipantJoined.Validate if the designated constraints aren't met.
type ParticipantJoinedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParticipantJoinedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParticipantJoinedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParticipantJoinedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParticipantJoinedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParticipantJoinedValidationError) ErrorName() string {
	return "ParticipantJoinedValidationError"
}

// Error satisfies the builtin error interface
func (e ParticipantJoinedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParticipantJoined.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParticipantJoinedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParticipantJoinedValidationError{}

// Validate checks the field values on ParticipantLeft with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ParticipantLeft) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParticipantLeft with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ParticipantLeftMultiError, or nil if none found.
func (m *ParticipantLeft) ValidateAll() error {
	return m.validate(true)
}

func (m *ParticipantLeft) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParticipant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ParticipantLeftValidationError{
					field:  "Participant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ParticipantLeftValidationError{
					field:  "Participant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParticipant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ParticipantLeftValidationError{
				field:  "Participant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ParticipantLeftMultiError(errors)
	}

	return nil
}

// ParticipantLeftMultiError is an error wrapping multiple validation errors
// returned by ParticipantLeft.ValidateAll() if the designated constraints
// aren't met.
type ParticipantLeftMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParticipantLeftMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParticipantLeftMultiError) AllErrors() []error { return m }

// ParticipantLeftValidationError is the validation error returned by
// ParticipantLeft.Validate if the designated constraints aren't met.
type ParticipantLeftValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParticipantLeftValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParticipantLeftValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParticipantLeftValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParticipantLeftValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParticipantLeftValidationError) ErrorName() string { return "ParticipantLeftValidationError" }

// Error satisfies the builtin error interface
func (e ParticipantLeftValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParticipantLeft.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParticipantLeftValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParticipantLeftValidationError{}

// Validate checks the field values on BroadcastStarted with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BroadcastStarted) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BroadcastStarted with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BroadcastStartedMultiError, or nil if none found.
func (m *BroadcastStarted) ValidateAll() error {
	return m.validate(true)
}

func (m *BroadcastStarted) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBroadcast()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BroadcastStartedValidationError{
					field:  "Broadcast",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BroadcastStartedValidationError{
					field:  "Broadcast",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBroadcast()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BroadcastStartedValidationError{
				field:  "Broadcast",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BroadcastStartedMultiError(errors)
	}

	return nil
}

// BroadcastStartedMultiError is an error wrapping multiple validation errors
// returned by BroadcastStarted.ValidateAll() if the designated constraints
// aren't met.
type BroadcastStartedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BroadcastStartedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BroadcastStartedMultiError) AllErrors() []error { return m }

// BroadcastStartedValidationError is the validation error returned by
// BroadcastStarted.Validate if the designated constraints aren't met.
type BroadcastStartedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BroadcastStartedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BroadcastStartedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BroadcastStartedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BroadcastStartedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BroadcastStartedValidationError) ErrorName() string { return "BroadcastStartedValidationError" }

// Error satisfies the builtin error interface
func (e BroadcastStartedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBroadcastStarted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BroadcastStartedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BroadcastStartedValidationError{}

// Validate checks the field values on BroadcastEnded with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BroadcastEnded) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BroadcastEnded with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BroadcastEndedMultiError,
// or nil if none found.
func (m *BroadcastEnded) ValidateAll() error {
	return m.validate(true)
}

func (m *BroadcastEnded) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBroadcast()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BroadcastEndedValidationError{
					field:  "Broadcast",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BroadcastEndedValidationError{
					field:  "Broadcast",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBroadcast()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BroadcastEndedValidationError{
				field:  "Broadcast",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BroadcastEndedMultiError(errors)
	}

	return nil
}

// BroadcastEndedMultiError is an error wrapping multiple validation errors
// returned by BroadcastEnded.ValidateAll() if the designated constraints
// aren't met.
type BroadcastEndedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BroadcastEndedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BroadcastEndedMultiError) AllErrors() []error { return m }

// BroadcastEndedValidationError is the validation error returned by
// BroadcastEnded.Validate if the designated constraints aren't met.
type BroadcastEndedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BroadcastEndedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BroadcastEndedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BroadcastEndedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BroadcastEndedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BroadcastEndedValidationError) ErrorName() string { return "BroadcastEndedValidationError" }

// Error satisfies the builtin error interface
func (e BroadcastEndedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBroadcastEnded.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BroadcastEndedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BroadcastEndedValidationError{}
