// Generated by protoc-gen-siwftwirp. DO NOT EDIT
import Foundation;
import SwiftProtobuf;

typealias ProtoModel = SwiftProtobuf.Message & SwiftProtobuf._MessageImplementationBase & SwiftProtobuf._ProtoNameProviding

struct Stream_Video_CallCoordinatorService {
	var hostname: String = "http://localhost:26991"
	var pathPrefix: String = "/stream.video.CallCoordinatorService/"

    
	func createCall(createCallRequest:Stream_Video_CreateCallRequest, callback: @escaping (Stream_Video_CreateCallResponse?, Error?) -> Void) -> Void {
		let url = hostname + pathPrefix + "CreateCall"
		let uri = URL(string: url)!
    	var req = URLRequest.init(url:uri);
		req.setValue("application/protobuf", forHTTPHeaderField: "Content-Type")
		req.httpMethod = "POST"

		let data = try! createCallRequest.serializedData()
		req.httpBody = data
		let task = URLSession.shared.dataTask(with: req) {data, response, error in
            handleResponse(data: data, error: error, callback: callback)
    	}
    
    	task.resume()
	}
    
    private func handleResponse<T: ProtoModel>(
        data: Data?,
        error: Error?,
        callback: @escaping (T?, Error?) -> Void
    ) {
        if let error = error {
            callback(nil, error)
            return
        }
           guard let data = data else {
               callback(nil, error)
               return
           }
        let response = try? T.init(serializedData: data)
           callback(response, error)
    }
    
	func getCall(getCallRequest:Stream_Video_GetCallRequest, callback: @escaping (Stream_Video_GetCallResponse?, Error?) -> Void) -> Void {
		let url = hostname + pathPrefix + "GetCall"
		let uri = URL(string: url)!
    	var req = URLRequest.init(url:uri);
		req.setValue("application/protobuf", forHTTPHeaderField: "Content-Type")
		req.httpMethod = "POST"

		let data = try! getCallRequest.serializedData()
		req.httpBody = data
		let task = URLSession.shared.dataTask(with: req) {data, response, error in
			if let error = error {
				callback(nil, error)
				return
			}
        	guard let data = data else {
        		callback(nil, error)
            	return
        	}
        	let resp = try? Stream_Video_GetCallResponse.init(serializedData: data)
        	callback(resp, error)
    	}
    
    	task.resume()
	}
    
	func updateCall(updateCallRequest:Stream_Video_UpdateCallRequest, callback: @escaping (Stream_Video_UpdateCallResponse?, Error?) -> Void) -> Void {
		let url = hostname + pathPrefix + "UpdateCall"
		let uri = URL(string: url)!
    	var req = URLRequest.init(url:uri);
		req.setValue("application/protobuf", forHTTPHeaderField: "Content-Type")
		req.httpMethod = "POST"

		let data = try! updateCallRequest.serializedData()
		req.httpBody = data
		let task = URLSession.shared.dataTask(with: req) {data, response, error in
			if let error = error {
				callback(nil, error)
				return
			}
        	guard let data = data else {
        		callback(nil, error)
            	return
        	}
        	let resp = try? Stream_Video_UpdateCallResponse.init(serializedData: data)
        	callback(resp, error)
    	}
    
    	task.resume()
	}
    
	func deleteCall(deleteCallRequest:Stream_Video_DeleteCallRequest, callback: @escaping (Stream_Video_DeleteCallResponse?, Error?) -> Void) -> Void {
		let url = hostname + pathPrefix + "DeleteCall"
		let uri = URL(string: url)!
    	var req = URLRequest.init(url:uri);
		req.setValue("application/protobuf", forHTTPHeaderField: "Content-Type")
		req.httpMethod = "POST"

		let data = try! deleteCallRequest.serializedData()
		req.httpBody = data
		let task = URLSession.shared.dataTask(with: req) {data, response, error in
			if let error = error {
				callback(nil, error)
				return
			}
        	guard let data = data else {
        		callback(nil, error)
            	return
        	}
        	let resp = try? Stream_Video_DeleteCallResponse.init(serializedData: data)
        	callback(resp, error)
    	}
    
    	task.resume()
	}
    
	func joinCall(joinCallRequest:Stream_Video_JoinCallRequest, callback: @escaping (Stream_Video_JoinCallResponse?, Error?) -> Void) -> Void {
		let url = hostname + pathPrefix + "JoinCall"
		let uri = URL(string: url)!
    	var req = URLRequest.init(url:uri);
		req.setValue("application/protobuf", forHTTPHeaderField: "Content-Type")
		req.httpMethod = "POST"

		let data = try! joinCallRequest.serializedData()
		req.httpBody = data
		let task = URLSession.shared.dataTask(with: req) {data, response, error in
			if let error = error {
				callback(nil, error)
				return
			}
        	guard let data = data else {
        		callback(nil, error)
            	return
        	}
        	let resp = try? Stream_Video_JoinCallResponse.init(serializedData: data)
        	callback(resp, error)
    	}
    
    	task.resume()
	}
    
	func selectEdgeServer(selectEdgeServerRequest:Stream_Video_SelectEdgeServerRequest, callback: @escaping (Stream_Video_SelectEdgeServerResponse?, Error?) -> Void) -> Void {
		let url = hostname + pathPrefix + "SelectEdgeServer"
		let uri = URL(string: url)!
    	var req = URLRequest.init(url:uri);
		req.setValue("application/protobuf", forHTTPHeaderField: "Content-Type")
		req.httpMethod = "POST"

		let data = try! selectEdgeServerRequest.serializedData()
		req.httpBody = data
		let task = URLSession.shared.dataTask(with: req) {data, response, error in
			if let error = error {
				callback(nil, error)
				return
			}
        	guard let data = data else {
        		callback(nil, error)
            	return
        	}
        	let resp = try? Stream_Video_SelectEdgeServerResponse.init(serializedData: data)
        	callback(resp, error)
    	}
    
    	task.resume()
	}
    
	func leaveCall(leaveCallRequest:Stream_Video_LeaveCallRequest, callback: @escaping (Stream_Video_LeaveCallResponse?, Error?) -> Void) -> Void {
		let url = hostname + pathPrefix + "LeaveCall"
		let uri = URL(string: url)!
    	var req = URLRequest.init(url:uri);
		req.setValue("application/protobuf", forHTTPHeaderField: "Content-Type")
		req.httpMethod = "POST"

		let data = try! leaveCallRequest.serializedData()
		req.httpBody = data
		let task = URLSession.shared.dataTask(with: req) {data, response, error in
			if let error = error {
				callback(nil, error)
				return
			}
        	guard let data = data else {
        		callback(nil, error)
            	return
        	}
        	let resp = try? Stream_Video_LeaveCallResponse.init(serializedData: data)
        	callback(resp, error)
    	}
    
    	task.resume()
	}
    
	func endCall(endCallRequest:Stream_Video_EndCallRequest, callback: @escaping (Stream_Video_EndCallResponse?, Error?) -> Void) -> Void {
		let url = hostname + pathPrefix + "EndCall"
		let uri = URL(string: url)!
    	var req = URLRequest.init(url:uri);
		req.setValue("application/protobuf", forHTTPHeaderField: "Content-Type")
		req.httpMethod = "POST"

		let data = try! endCallRequest.serializedData()
		req.httpBody = data
		let task = URLSession.shared.dataTask(with: req) {data, response, error in
			if let error = error {
				callback(nil, error)
				return
			}
        	guard let data = data else {
        		callback(nil, error)
            	return
        	}
        	let resp = try? Stream_Video_EndCallResponse.init(serializedData: data)
        	callback(resp, error)
    	}
    
    	task.resume()
	}
    
	func addDevice(addDeviceRequest:Stream_Video_AddDeviceRequest, callback: @escaping (Stream_Video_AddDeviceResponse?, Error?) -> Void) -> Void {
		let url = hostname + pathPrefix + "AddDevice"
		let uri = URL(string: url)!
    	var req = URLRequest.init(url:uri);
		req.setValue("application/protobuf", forHTTPHeaderField: "Content-Type")
		req.httpMethod = "POST"

		let data = try! addDeviceRequest.serializedData()
		req.httpBody = data
		let task = URLSession.shared.dataTask(with: req) {data, response, error in
			if let error = error {
				callback(nil, error)
				return
			}
        	guard let data = data else {
        		callback(nil, error)
            	return
        	}
        	let resp = try? Stream_Video_AddDeviceResponse.init(serializedData: data)
        	callback(resp, error)
    	}
    
    	task.resume()
	}
    
	func removeDevice(removeDeviceRequest:Stream_Video_RemoveDeviceRequest, callback: @escaping (Stream_Video_RemoveDeviceResponse?, Error?) -> Void) -> Void {
		let url = hostname + pathPrefix + "RemoveDevice"
		let uri = URL(string: url)!
    	var req = URLRequest.init(url:uri);
		req.setValue("application/protobuf", forHTTPHeaderField: "Content-Type")
		req.httpMethod = "POST"

		let data = try! removeDeviceRequest.serializedData()
		req.httpBody = data
		let task = URLSession.shared.dataTask(with: req) {data, response, error in
			if let error = error {
				callback(nil, error)
				return
			}
        	guard let data = data else {
        		callback(nil, error)
            	return
        	}
        	let resp = try? Stream_Video_RemoveDeviceResponse.init(serializedData: data)
        	callback(resp, error)
    	}
    
    	task.resume()
	}
    
	func listDevices(listDevicesRequest:Stream_Video_ListDevicesRequest, callback: @escaping (Stream_Video_ListDevicesResponse?, Error?) -> Void) -> Void {
		let url = hostname + pathPrefix + "ListDevices"
		let uri = URL(string: url)!
    	var req = URLRequest.init(url:uri);
		req.setValue("application/protobuf", forHTTPHeaderField: "Content-Type")
		req.httpMethod = "POST"

		let data = try! listDevicesRequest.serializedData()
		req.httpBody = data
		let task = URLSession.shared.dataTask(with: req) {data, response, error in
			if let error = error {
				callback(nil, error)
				return
			}
        	guard let data = data else {
        		callback(nil, error)
            	return
        	}
        	let resp = try? Stream_Video_ListDevicesResponse.init(serializedData: data)
        	callback(resp, error)
    	}
    
    	task.resume()
	}
    
	func sendCustomEvent(sendCustomEventRequest:Stream_Video_SendCustomEventRequest, callback: @escaping (Stream_Video_SendCustomEventResponse?, Error?) -> Void) -> Void {
		let url = hostname + pathPrefix + "SendCustomEvent"
		let uri = URL(string: url)!
    	var req = URLRequest.init(url:uri);
		req.setValue("application/protobuf", forHTTPHeaderField: "Content-Type")
		req.httpMethod = "POST"

		let data = try! sendCustomEventRequest.serializedData()
		req.httpBody = data
		let task = URLSession.shared.dataTask(with: req) {data, response, error in
			if let error = error {
				callback(nil, error)
				return
			}
        	guard let data = data else {
        		callback(nil, error)
            	return
        	}
        	let resp = try? Stream_Video_SendCustomEventResponse.init(serializedData: data)
        	callback(resp, error)
    	}
    
    	task.resume()
	}
    
	func createOrUpdateCalls(createOrUpdateCallsRequest:Stream_Video_CreateOrUpdateCallsRequest, callback: @escaping (Stream_Video_CreateOrUpdateCallsResponse?, Error?) -> Void) -> Void {
		let url = hostname + pathPrefix + "CreateOrUpdateCalls"
		let uri = URL(string: url)!
    	var req = URLRequest.init(url:uri);
		req.setValue("application/protobuf", forHTTPHeaderField: "Content-Type")
		req.httpMethod = "POST"

		let data = try! createOrUpdateCallsRequest.serializedData()
		req.httpBody = data
		let task = URLSession.shared.dataTask(with: req) {data, response, error in
			if let error = error {
				callback(nil, error)
				return
			}
        	guard let data = data else {
        		callback(nil, error)
            	return
        	}
        	let resp = try? Stream_Video_CreateOrUpdateCallsResponse.init(serializedData: data)
        	callback(resp, error)
    	}
    
    	task.resume()
	}
    
	func createOrUpdateUsers(createOrUpdateUsersRequest:Stream_Video_CreateOrUpdateUsersRequest, callback: @escaping (Stream_Video_CreateOrUpdateUsersResponse?, Error?) -> Void) -> Void {
		let url = hostname + pathPrefix + "CreateOrUpdateUsers"
		let uri = URL(string: url)!
    	var req = URLRequest.init(url:uri);
		req.setValue("application/protobuf", forHTTPHeaderField: "Content-Type")
		req.httpMethod = "POST"

		let data = try! createOrUpdateUsersRequest.serializedData()
		req.httpBody = data
		let task = URLSession.shared.dataTask(with: req) {data, response, error in
			if let error = error {
				callback(nil, error)
				return
			}
        	guard let data = data else {
        		callback(nil, error)
            	return
        	}
        	let resp = try? Stream_Video_CreateOrUpdateUsersResponse.init(serializedData: data)
        	callback(resp, error)
    	}
    
    	task.resume()
	}
    
	func transcribeCall(transcribeCallRequest:Stream_Video_TranscribeCallRequest, callback: @escaping (Stream_Video_TranscribeCallResponse?, Error?) -> Void) -> Void {
		let url = hostname + pathPrefix + "TranscribeCall"
		let uri = URL(string: url)!
    	var req = URLRequest.init(url:uri);
		req.setValue("application/protobuf", forHTTPHeaderField: "Content-Type")
		req.httpMethod = "POST"

		let data = try! transcribeCallRequest.serializedData()
		req.httpBody = data
		let task = URLSession.shared.dataTask(with: req) {data, response, error in
			if let error = error {
				callback(nil, error)
				return
			}
        	guard let data = data else {
        		callback(nil, error)
            	return
        	}
        	let resp = try? Stream_Video_TranscribeCallResponse.init(serializedData: data)
        	callback(resp, error)
    	}
    
    	task.resume()
	}
    
	func stopTranscribeCall(stopTranscribeCallRequest:Stream_Video_StopTranscribeCallRequest, callback: @escaping (Stream_Video_StopTranscribeCallResponse?, Error?) -> Void) -> Void {
		let url = hostname + pathPrefix + "StopTranscribeCall"
		let uri = URL(string: url)!
    	var req = URLRequest.init(url:uri);
		req.setValue("application/protobuf", forHTTPHeaderField: "Content-Type")
		req.httpMethod = "POST"

		let data = try! stopTranscribeCallRequest.serializedData()
		req.httpBody = data
		let task = URLSession.shared.dataTask(with: req) {data, response, error in
			if let error = error {
				callback(nil, error)
				return
			}
        	guard let data = data else {
        		callback(nil, error)
            	return
        	}
        	let resp = try? Stream_Video_StopTranscribeCallResponse.init(serializedData: data)
        	callback(resp, error)
    	}
    
    	task.resume()
	}
    
	func startBroadcast(startBroadcastRequest:Stream_Video_StartBroadcastRequest, callback: @escaping (Stream_Video_StartBroadcastResponse?, Error?) -> Void) -> Void {
		let url = hostname + pathPrefix + "StartBroadcast"
		let uri = URL(string: url)!
    	var req = URLRequest.init(url:uri);
		req.setValue("application/protobuf", forHTTPHeaderField: "Content-Type")
		req.httpMethod = "POST"

		let data = try! startBroadcastRequest.serializedData()
		req.httpBody = data
		let task = URLSession.shared.dataTask(with: req) {data, response, error in
			if let error = error {
				callback(nil, error)
				return
			}
        	guard let data = data else {
        		callback(nil, error)
            	return
        	}
        	let resp = try? Stream_Video_StartBroadcastResponse.init(serializedData: data)
        	callback(resp, error)
    	}
    
    	task.resume()
	}
    
	func stopBroadcast(stopBroadcastRequest:Stream_Video_StopBroadcastRequest, callback: @escaping (Stream_Video_StartBroadcastResponse?, Error?) -> Void) -> Void {
		let url = hostname + pathPrefix + "StopBroadcast"
		let uri = URL(string: url)!
    	var req = URLRequest.init(url:uri);
		req.setValue("application/protobuf", forHTTPHeaderField: "Content-Type")
		req.httpMethod = "POST"

		let data = try! stopBroadcastRequest.serializedData()
		req.httpBody = data
		let task = URLSession.shared.dataTask(with: req) {data, response, error in
			if let error = error {
				callback(nil, error)
				return
			}
        	guard let data = data else {
        		callback(nil, error)
            	return
        	}
        	let resp = try? Stream_Video_StartBroadcastResponse.init(serializedData: data)
        	callback(resp, error)
    	}
    
    	task.resume()
	}
    
	func createUser(createUserRequest:Stream_Video_CreateUserRequest, callback: @escaping (Stream_Video_CreateUserResponse?, Error?) -> Void) -> Void {
		let url = hostname + pathPrefix + "CreateUser"
		let uri = URL(string: url)!
    	var req = URLRequest.init(url:uri);
		req.setValue("application/protobuf", forHTTPHeaderField: "Content-Type")
		req.httpMethod = "POST"

		let data = try! createUserRequest.serializedData()
		req.httpBody = data
		let task = URLSession.shared.dataTask(with: req) {data, response, error in
			if let error = error {
				callback(nil, error)
				return
			}
        	guard let data = data else {
        		callback(nil, error)
            	return
        	}
        	let resp = try? Stream_Video_CreateUserResponse.init(serializedData: data)
        	callback(resp, error)
    	}
    
    	task.resume()
	}
    
	func deleteUser(deleteUserRequest:Stream_Video_DeleteUserRequest, callback: @escaping (Stream_Video_DeleteUserResponse?, Error?) -> Void) -> Void {
		let url = hostname + pathPrefix + "DeleteUser"
		let uri = URL(string: url)!
    	var req = URLRequest.init(url:uri);
		req.setValue("application/protobuf", forHTTPHeaderField: "Content-Type")
		req.httpMethod = "POST"

		let data = try! deleteUserRequest.serializedData()
		req.httpBody = data
		let task = URLSession.shared.dataTask(with: req) {data, response, error in
			if let error = error {
				callback(nil, error)
				return
			}
        	guard let data = data else {
        		callback(nil, error)
            	return
        	}
        	let resp = try? Stream_Video_DeleteUserResponse.init(serializedData: data)
        	callback(resp, error)
    	}
    
    	task.resume()
	}
    
	func exportUser(exportUserRequest:Stream_Video_ExportUserRequest, callback: @escaping (Stream_Video_ExportUserResponse?, Error?) -> Void) -> Void {
		let url = hostname + pathPrefix + "ExportUser"
		let uri = URL(string: url)!
    	var req = URLRequest.init(url:uri);
		req.setValue("application/protobuf", forHTTPHeaderField: "Content-Type")
		req.httpMethod = "POST"

		let data = try! exportUserRequest.serializedData()
		req.httpBody = data
		let task = URLSession.shared.dataTask(with: req) {data, response, error in
			if let error = error {
				callback(nil, error)
				return
			}
        	guard let data = data else {
        		callback(nil, error)
            	return
        	}
        	let resp = try? Stream_Video_ExportUserResponse.init(serializedData: data)
        	callback(resp, error)
    	}
    
    	task.resume()
	}
    
	func startRecording(startRecordingRequest:Stream_Video_StartRecordingRequest, callback: @escaping (Stream_Video_StartRecordingResponse?, Error?) -> Void) -> Void {
		let url = hostname + pathPrefix + "StartRecording"
		let uri = URL(string: url)!
    	var req = URLRequest.init(url:uri);
		req.setValue("application/protobuf", forHTTPHeaderField: "Content-Type")
		req.httpMethod = "POST"

		let data = try! startRecordingRequest.serializedData()
		req.httpBody = data
		let task = URLSession.shared.dataTask(with: req) {data, response, error in
			if let error = error {
				callback(nil, error)
				return
			}
        	guard let data = data else {
        		callback(nil, error)
            	return
        	}
        	let resp = try? Stream_Video_StartRecordingResponse.init(serializedData: data)
        	callback(resp, error)
    	}
    
    	task.resume()
	}
    
	func stopRecording(stopRecordingRequest:Stream_Video_StopRecordingRequest, callback: @escaping (Stream_Video_StopRecordingResponse?, Error?) -> Void) -> Void {
		let url = hostname + pathPrefix + "StopRecording"
		let uri = URL(string: url)!
    	var req = URLRequest.init(url:uri);
		req.setValue("application/protobuf", forHTTPHeaderField: "Content-Type")
		req.httpMethod = "POST"

		let data = try! stopRecordingRequest.serializedData()
		req.httpBody = data
		let task = URLSession.shared.dataTask(with: req) {data, response, error in
			if let error = error {
				callback(nil, error)
				return
			}
        	guard let data = data else {
        		callback(nil, error)
            	return
        	}
        	let resp = try? Stream_Video_StopRecordingResponse.init(serializedData: data)
        	callback(resp, error)
    	}
    
    	task.resume()
	}
    
	func getRecordings(getRecordingsRequest:Stream_Video_GetRecordingsRequest, callback: @escaping (Stream_Video_GetRecordingsResponse?, Error?) -> Void) -> Void {
		let url = hostname + pathPrefix + "GetRecordings"
		let uri = URL(string: url)!
    	var req = URLRequest.init(url:uri);
		req.setValue("application/protobuf", forHTTPHeaderField: "Content-Type")
		req.httpMethod = "POST"

		let data = try! getRecordingsRequest.serializedData()
		req.httpBody = data
		let task = URLSession.shared.dataTask(with: req) {data, response, error in
			if let error = error {
				callback(nil, error)
				return
			}
        	guard let data = data else {
        		callback(nil, error)
            	return
        	}
        	let resp = try? Stream_Video_GetRecordingsResponse.init(serializedData: data)
        	callback(resp, error)
    	}
    
    	task.resume()
	}
    
}



